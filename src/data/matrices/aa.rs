use crate::data::{AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP, matrices::WeightMatrix};

/// Fetches the BLOSUM matrix of number `n` if it is available in *Zoe*.
#[must_use]
pub fn blosum(n: usize) -> Option<&'static WeightMatrix<'static, i8, 25>> {
    match n {
        30 => Some(&BLOSUM_30),
        35 => Some(&BLOSUM_35),
        40 => Some(&BLOSUM_40),
        45 => Some(&BLOSUM_45),
        50 => Some(&BLOSUM_50),
        55 => Some(&BLOSUM_55),
        60 => Some(&BLOSUM_60),
        62 => Some(&BLOSUM_62),
        65 => Some(&BLOSUM_65),
        70 => Some(&BLOSUM_70),
        75 => Some(&BLOSUM_75),
        80 => Some(&BLOSUM_80),
        85 => Some(&BLOSUM_85),
        90 => Some(&BLOSUM_90),
        95 => Some(&BLOSUM_95),
        100 => Some(&BLOSUM_100),
        _ => None,
    }
}

/// Fetches the PAM matrix of number `n` if it is available in *Zoe*.
#[must_use]
pub fn pam(n: usize) -> Option<&'static WeightMatrix<'static, i8, 25>> {
    match n {
        30 => Some(&PAM_30),
        40 => Some(&PAM_40),
        70 => Some(&PAM_70),
        120 => Some(&PAM_120),
        200 => Some(&PAM_200),
        250 => Some(&PAM_250),
        _ => None,
    }
}

/// Fetches the amino acid substitution matrix by name if it is available in
/// *Zoe*.
///
/// Examples of allowed names include strings such as `"PAM120"`, `"blosum 62"`,
/// `"PAM_30"`, and `"pam-250"`. Formally, this is case-insensitive, and it
/// allows for whitespace, a hyphen, or an underscore between the name and the
/// number.
#[must_use]
pub fn aa_mat_from_name(name: &str) -> Option<&'static WeightMatrix<'static, i8, 25>> {
    let name = name.trim().to_ascii_uppercase().replace(['_', '-'], "");
    if let Some(n) = name.strip_prefix("BLOSUM")
        && let Ok(n) = n.trim_start().parse::<usize>()
    {
        blosum(n)
    } else if let Some(n) = name.strip_prefix("PAM")
        && let Ok(n) = n.trim_start().parse::<usize>()
    {
        pam(n)
    } else {
        None
    }
}

/// The BLOSUM30 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/5 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static BLOSUM_30: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       // A   C   D   E   F   G   H   I   K   L   M   N   P   Q   R   S   T   V   W   Y   *   B   J   Z   X  
        [ 4, -3,  0,  0, -2,  0, -2,  0,  0, -1,  1,  0, -1,  1, -1,  1,  1,  1, -5, -4, -7,  0, -1,  0,  0], // A
        [-3, 17, -3,  1, -3, -4, -5, -2, -3,  0, -2, -1, -3, -2, -2, -2, -2, -2, -2, -6, -7, -2, -1,  0, -2], // C
        [ 0, -3,  9,  1, -5, -1, -2, -4,  0, -1, -3,  1, -1, -1, -1,  0, -1, -2, -4, -1, -7,  5, -2,  0, -1], // D
        [ 0,  1,  1,  6, -4, -2,  0, -3,  2, -1, -1, -1,  1,  2, -1,  0, -2, -3, -1, -2, -7,  0, -2,  5, -1], // E
        [-2, -3, -5, -4, 10, -3, -3,  0, -1,  2, -2, -1, -4, -3, -1, -1, -2,  1,  1,  3, -7, -3,  1, -4, -1], // F
        [ 0, -4, -1, -2, -3,  8, -3, -1, -1, -2, -2,  0, -1, -2, -2,  0, -2, -3,  1, -3, -7,  0, -2, -2, -1], // G
        [-2, -5, -2,  0, -3, -3, 14, -2, -2, -1,  2, -1,  1,  0, -1, -1, -2, -3, -5,  0, -7, -2, -2,  0, -1], // H
        [ 0, -2, -4, -3,  0, -1, -2,  6, -2,  2,  1,  0, -3, -2, -3, -1,  0,  4, -3, -1, -7, -2,  3, -3,  0], // I
        [ 0, -3,  0,  2, -1, -1, -2, -2,  4, -2,  2,  0,  1,  0,  1,  0, -1, -2, -2, -1, -7,  0, -2,  1,  0], // K
        [-1,  0, -1, -1,  2, -2, -1,  2, -2,  4,  2, -2, -3, -2, -2, -2,  0,  1, -2,  3, -7, -1,  3, -1,  0], // L
        [ 1, -2, -3, -1, -2, -2,  2,  1,  2,  2,  6,  0, -4, -1,  0, -2,  0,  0, -3, -1, -7, -2,  2, -1,  0], // M
        [ 0, -1,  1, -1, -1,  0, -1,  0,  0, -2,  0,  8, -3, -1, -2,  0,  1, -2, -7, -4, -7,  4, -1, -1,  0], // N
        [-1, -3, -1,  1, -4, -1,  1, -3,  1, -3, -4, -3, 11,  0, -1, -1,  0, -4, -3, -2, -7, -2, -3,  0, -1], // P
        [ 1, -2, -1,  2, -3, -2,  0, -2,  0, -2, -1, -1,  0,  8,  3, -1,  0, -3, -1, -1, -7, -1, -2,  4,  0], // Q
        [-1, -2, -1, -1, -1, -2, -1, -3,  1, -2,  0, -2, -1,  3,  8, -1, -3, -1,  0,  0, -7, -2, -3,  0, -1], // R
        [ 1, -2,  0,  0, -1,  0, -1, -1,  0, -2, -2,  0, -1, -1, -1,  4,  2, -1, -3, -2, -7,  0, -1, -1,  0], // S
        [ 1, -2, -1, -2, -2, -2, -2,  0, -1,  0,  0,  1,  0,  0, -3,  2,  5,  1, -5, -1, -7,  0,  0, -1,  0], // T
        [ 1, -2, -2, -3,  1, -3, -3,  4, -2,  1,  0, -2, -4, -3, -1, -1,  1,  5, -3,  1, -7, -2,  2, -3,  0], // V
        [-5, -2, -4, -1,  1,  1, -5, -3, -2, -2, -3, -7, -3, -1,  0, -3, -5, -3, 20,  5, -7, -5, -2, -1, -2], // W
        [-4, -6, -1, -2,  3, -3,  0, -1, -1,  3, -1, -4, -2, -1,  0, -2, -1,  1,  5,  9, -7, -3,  1, -2, -1], // Y
        [-7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7,  1, -7, -7, -7, -7], // *
        [ 0, -2,  5,  0, -3,  0, -2, -2,  0, -1, -2,  4, -2, -1, -2,  0,  0, -2, -5, -3, -7,  5, -2,  0, -1], // B
        [-1, -1, -2, -2,  1, -2, -2,  3, -2,  3,  2, -1, -3, -2, -3, -1,  0,  2, -2,  1, -7, -2,  3, -2,  0], // J
        [ 0,  0,  0,  5, -4, -2,  0, -3,  1, -1, -1, -1,  0,  4,  0, -1, -1, -3, -1, -2, -7,  0, -2,  4, -1], // Z
        [ 0, -2, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0, -1,  0, -1,  0,  0,  0, -2, -1, -7, -1,  0, -1, -1], // X
    ]
);

/// The BLOSUM35 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/4 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static BLOSUM_35: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       // A   C   D   E   F   G   H   I   K   L   M   N   P   Q   R   S   T   V   W   Y   *   B   J   Z   X  
        [ 5, -2, -1, -1, -2,  0, -2, -1,  0, -2,  0, -1, -2,  0, -1,  1,  0,  0, -2, -1, -5, -1, -1, -1,  0], // A
        [-2, 15, -3, -1, -4, -3, -4, -4, -2, -2, -4, -1, -4, -3, -3, -3, -1, -2, -5, -5, -5, -2, -3, -2, -2], // C
        [-1, -3,  8,  2, -3, -2,  0, -3, -1, -2, -3,  1, -1, -1, -1, -1, -1, -2, -3, -2, -5,  5, -3,  1, -1], // D
        [-1, -1,  2,  6, -3, -2, -1, -3,  1, -1, -2, -1,  0,  2, -1,  0, -1, -2, -1, -1, -5,  0, -2,  5, -1], // E
        [-2, -4, -3, -3,  8, -3, -3,  1, -1,  2,  0, -1, -4, -4, -1, -1, -1,  1,  1,  3, -5, -2,  1, -3, -1], // F
        [ 0, -3, -2, -2, -3,  7, -2, -3, -1, -3, -1,  1, -2, -2, -2,  1, -2, -3, -1, -2, -5,  0, -3, -2, -1], // G
        [-2, -4,  0, -1, -3, -2, 12, -3, -2, -2,  1,  1, -1, -1, -1, -1, -2, -4, -4,  0, -5,  0, -2, -1, -1], // H
        [-1, -4, -3, -3,  1, -3, -3,  5, -2,  2,  1, -1, -1, -2, -3, -2, -1,  4, -1,  0, -5, -2,  4, -3,  0], // I
        [ 0, -2, -1,  1, -1, -1, -2, -2,  5, -2,  0,  0,  0,  0,  2,  0,  0, -2,  0, -1, -5,  0, -2,  1,  0], // K
        [-2, -2, -2, -1,  2, -3, -2,  2, -2,  5,  3, -2, -3, -2, -2, -2,  0,  2,  0,  0, -5, -2,  4, -2,  0], // L
        [ 0, -4, -3, -2,  0, -1,  1,  1,  0,  3,  6, -1, -3, -1,  0, -1,  0,  1,  1,  0, -5, -2,  2, -2,  0], // M
        [-1, -1,  1, -1, -1,  1,  1, -1,  0, -2, -1,  7, -2,  1, -1,  0,  0, -2, -2, -2, -5,  4, -2,  0,  0], // N
        [-2, -4, -1,  0, -4, -2, -1, -1,  0, -3, -3, -2, 10,  0, -2, -2,  0, -3, -4, -3, -5, -1, -2,  0, -1], // P
        [ 0, -3, -1,  2, -4, -2, -1, -2,  0, -2, -1,  1,  0,  7,  2,  0,  0, -3, -1,  0, -5,  0, -2,  4, -1], // Q
        [-1, -3, -1, -1, -1, -2, -1, -3,  2, -2,  0, -1, -2,  2,  8, -1, -2, -1,  0,  0, -5, -1, -2,  0, -1], // R
        [ 1, -3, -1,  0, -1,  1, -1, -2,  0, -2, -1,  0, -2,  0, -1,  4,  2, -1, -2, -1, -5,  0, -2,  0,  0], // S
        [ 0, -1, -1, -1, -1, -2, -2, -1,  0,  0,  0,  0,  0,  0, -2,  2,  5,  1, -2, -2, -5, -1,  0, -1,  0], // T
        [ 0, -2, -2, -2,  1, -3, -4,  4, -2,  2,  1, -2, -3, -3, -1, -1,  1,  5, -2,  0, -5, -2,  2, -2,  0], // V
        [-2, -5, -3, -1,  1, -1, -4, -1,  0,  0,  1, -2, -4, -1,  0, -2, -2, -2, 16,  3, -5, -3, -1, -1, -1], // W
        [-1, -5, -2, -1,  3, -2,  0,  0, -1,  0,  0, -2, -3,  0,  0, -1, -2,  0,  3,  8, -5, -2,  0, -1, -1], // Y
        [-5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,  1, -5, -5, -5, -5], // *
        [-1, -2,  5,  0, -2,  0,  0, -2,  0, -2, -2,  4, -1,  0, -1,  0, -1, -2, -3, -2, -5,  5, -2,  0, -1], // B
        [-1, -3, -3, -2,  1, -3, -2,  4, -2,  4,  2, -2, -2, -2, -2, -2,  0,  2, -1,  0, -5, -2,  4, -2,  0], // J
        [-1, -2,  1,  5, -3, -2, -1, -3,  1, -2, -2,  0,  0,  4,  0,  0, -1, -2, -1, -1, -5,  0, -2,  4, -1], // Z
        [ 0, -2, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0, -1, -1, -1,  0,  0,  0, -1, -1, -5, -1,  0, -1, -1], // X
    ]
);

/// The BLOSUM40 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/4 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static BLOSUM_40: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       // A   C   D   E   F   G   H   I   K   L   M   N   P   Q   R   S   T   V   W   Y   *   B   J   Z   X  
        [ 5, -2, -1, -1, -3,  1, -2, -1, -1, -2, -1, -1, -2,  0, -2,  1,  0,  0, -3, -2, -6, -1, -2, -1,  0], // A
        [-2, 16, -2, -2, -2, -3, -4, -4, -3, -2, -3, -2, -5, -4, -3, -1, -1, -2, -6, -4, -6, -2, -3, -3, -2], // C
        [-1, -2,  9,  2, -4, -2,  0, -4,  0, -3, -3,  2, -2, -1, -1,  0, -1, -3, -5, -3, -6,  6, -3,  1, -1], // D
        [-1, -2,  2,  7, -3, -3,  0, -4,  1, -2, -2, -1,  0,  2, -1,  0, -1, -3, -2, -2, -6,  1, -3,  5, -1], // E
        [-3, -2, -4, -3,  9, -3, -2,  1, -3,  2,  0, -3, -4, -4, -2, -2, -1,  0,  1,  4, -6, -3,  1, -4, -1], // F
        [ 1, -3, -2, -3, -3,  8, -2, -4, -2, -4, -2,  0, -1, -2, -3,  0, -2, -4, -2, -3, -6, -1, -4, -2, -1], // G
        [-2, -4,  0,  0, -2, -2, 13, -3, -1, -2,  1,  1, -2,  0,  0, -1, -2, -4, -5,  2, -6,  0, -2,  0, -1], // H
        [-1, -4, -4, -4,  1, -4, -3,  6, -3,  2,  1, -2, -2, -3, -3, -2, -1,  4, -3,  0, -6, -3,  4, -4, -1], // I
        [-1, -3,  0,  1, -3, -2, -1, -3,  6, -2, -1,  0, -1,  1,  3,  0,  0, -2, -2, -1, -6,  0, -2,  1, -1], // K
        [-2, -2, -3, -2,  2, -4, -2,  2, -2,  6,  3, -3, -4, -2, -2, -3, -1,  2, -1,  0, -6, -3,  4, -2, -1], // L
        [-1, -3, -3, -2,  0, -2,  1,  1, -1,  3,  7, -2, -2, -1, -1, -2, -1,  1, -2,  1, -6, -3,  2, -2,  0], // M
        [-1, -2,  2, -1, -3,  0,  1, -2,  0, -3, -2,  8, -2,  1,  0,  1,  0, -3, -4, -2, -6,  4, -3,  0, -1], // N
        [-2, -5, -2,  0, -4, -1, -2, -2, -1, -4, -2, -2, 11, -2, -3, -1,  0, -3, -4, -3, -6, -2, -3, -1, -2], // P
        [ 0, -4, -1,  2, -4, -2,  0, -3,  1, -2, -1,  1, -2,  8,  2,  1, -1, -3, -1, -1, -6,  0, -2,  4, -1], // Q
        [-2, -3, -1, -1, -2, -3,  0, -3,  3, -2, -1,  0, -3,  2,  9, -1, -2, -2, -2, -1, -6, -1, -3,  0, -1], // R
        [ 1, -1,  0,  0, -2,  0, -1, -2,  0, -3, -2,  1, -1,  1, -1,  5,  2, -1, -5, -2, -6,  0, -3,  0,  0], // S
        [ 0, -1, -1, -1, -1, -2, -2, -1,  0, -1, -1,  0,  0, -1, -2,  2,  6,  1, -4, -1, -6,  0, -1, -1,  0], // T
        [ 0, -2, -3, -3,  0, -4, -4,  4, -2,  2,  1, -3, -3, -3, -2, -1,  1,  5, -3, -1, -6, -3,  3, -3, -1], // V
        [-3, -6, -5, -2,  1, -2, -5, -3, -2, -1, -2, -4, -4, -1, -2, -5, -4, -3, 19,  3, -6, -4, -2, -2, -2], // W
        [-2, -4, -3, -2,  4, -3,  2,  0, -1,  0,  1, -2, -3, -1, -1, -2, -1, -1,  3,  9, -6, -3,  0, -2, -1], // Y
        [-6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6,  1, -6, -6, -6, -6], // *
        [-1, -2,  6,  1, -3, -1,  0, -3,  0, -3, -3,  4, -2,  0, -1,  0,  0, -3, -4, -3, -6,  5, -3,  1, -1], // B
        [-2, -3, -3, -3,  1, -4, -2,  4, -2,  4,  2, -3, -3, -2, -3, -3, -1,  3, -2,  0, -6, -3,  4, -3, -1], // J
        [-1, -3,  1,  5, -4, -2,  0, -4,  1, -2, -2,  0, -1,  4,  0,  0, -1, -3, -2, -2, -6,  1, -3,  5, -1], // Z
        [ 0, -2, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -2, -1, -1,  0,  0, -1, -2, -1, -6, -1, -1, -1, -1], // X
    ]
);

/// The BLOSUM45 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/3 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static BLOSUM_45: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       // A   C   D   E   F   G   H   I   K   L   M   N   P   Q   R   S   T   V   W   Y   *   B   J   Z   X  
        [ 5, -1, -2, -1, -2,  0, -2, -1, -1, -1, -1, -1, -1, -1, -2,  1,  0,  0, -2, -2, -5, -1, -1, -1,  0], // A
        [-1, 12, -3, -3, -2, -3, -3, -3, -3, -2, -2, -2, -4, -3, -3, -1, -1, -1, -5, -3, -5, -2, -2, -3, -2], // C
        [-2, -3,  7,  2, -4, -1,  0, -4,  0, -3, -3,  2, -1,  0, -1,  0, -1, -3, -4, -2, -5,  5, -3,  1, -1], // D
        [-1, -3,  2,  6, -3, -2,  0, -3,  1, -2, -2,  0,  0,  2,  0,  0, -1, -3, -3, -2, -5,  1, -3,  4, -1], // E
        [-2, -2, -4, -3,  8, -3, -2,  0, -3,  1,  0, -2, -3, -4, -2, -2, -1,  0,  1,  3, -5, -3,  1, -3, -1], // F
        [ 0, -3, -1, -2, -3,  7, -2, -4, -2, -3, -2,  0, -2, -2, -2,  0, -2, -3, -2, -3, -5, -1, -4, -2, -1], // G
        [-2, -3,  0,  0, -2, -2, 10, -3, -1, -2,  0,  1, -2,  1,  0, -1, -2, -3, -3,  2, -5,  0, -2,  0, -1], // H
        [-1, -3, -4, -3,  0, -4, -3,  5, -3,  2,  2, -2, -2, -2, -3, -2, -1,  3, -2,  0, -5, -3,  3, -3, -1], // I
        [-1, -3,  0,  1, -3, -2, -1, -3,  5, -3, -1,  0, -1,  1,  3, -1, -1, -2, -2, -1, -5,  0, -3,  1, -1], // K
        [-1, -2, -3, -2,  1, -3, -2,  2, -3,  5,  2, -3, -3, -2, -2, -3, -1,  1, -2,  0, -5, -3,  4, -2, -1], // L
        [-1, -2, -3, -2,  0, -2,  0,  2, -1,  2,  6, -2, -2,  0, -1, -2, -1,  1, -2,  0, -5, -2,  2, -1, -1], // M
        [-1, -2,  2,  0, -2,  0,  1, -2,  0, -3, -2,  6, -2,  0,  0,  1,  0, -3, -4, -2, -5,  4, -3,  0, -1], // N
        [-1, -4, -1,  0, -3, -2, -2, -2, -1, -3, -2, -2,  9, -1, -2, -1, -1, -3, -3, -3, -5, -2, -3, -1, -1], // P
        [-1, -3,  0,  2, -4, -2,  1, -2,  1, -2,  0,  0, -1,  6,  1,  0, -1, -3, -2, -1, -5,  0, -2,  4, -1], // Q
        [-2, -3, -1,  0, -2, -2,  0, -3,  3, -2, -1,  0, -2,  1,  7, -1, -1, -2, -2, -1, -5, -1, -3,  0, -1], // R
        [ 1, -1,  0,  0, -2,  0, -1, -2, -1, -3, -2,  1, -1,  0, -1,  4,  2, -1, -4, -2, -5,  0, -2,  0,  0], // S
        [ 0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1,  0, -1, -1, -1,  2,  5,  0, -3, -1, -5,  0, -1, -1,  0], // T
        [ 0, -1, -3, -3,  0, -3, -3,  3, -2,  1,  1, -3, -3, -3, -2, -1,  0,  5, -3, -1, -5, -3,  2, -3, -1], // V
        [-2, -5, -4, -3,  1, -2, -3, -2, -2, -2, -2, -4, -3, -2, -2, -4, -3, -3, 15,  3, -5, -4, -2, -2, -2], // W
        [-2, -3, -2, -2,  3, -3,  2,  0, -1,  0,  0, -2, -3, -1, -1, -2, -1, -1,  3,  8, -5, -2,  0, -2, -1], // Y
        [-5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,  1, -5, -5, -5, -5], // *
        [-1, -2,  5,  1, -3, -1,  0, -3,  0, -3, -2,  4, -2,  0, -1,  0,  0, -3, -4, -2, -5,  4, -3,  1, -1], // B
        [-1, -2, -3, -3,  1, -4, -2,  3, -3,  4,  2, -3, -3, -2, -3, -2, -1,  2, -2,  0, -5, -3,  3, -2, -1], // J
        [-1, -3,  1,  4, -3, -2,  0, -3,  1, -2, -1,  0, -1,  4,  0,  0, -1, -3, -2, -2, -5,  1, -2,  4, -1], // Z
        [ 0, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0, -1, -2, -1, -5, -1, -1, -1, -1], // X
    ]
);

/// The BLOSUM50 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/3 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static BLOSUM_50: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       // A   C   D   E   F   G   H   I   K   L   M   N   P   Q   R   S   T   V   W   Y   *   B   J   Z   X  
        [ 5, -1, -2, -1, -3,  0, -2, -1, -1, -2, -1, -1, -1, -1, -2,  1,  0,  0, -3, -2, -5, -2, -2, -1, -1], // A
        [-1, 13, -4, -3, -2, -3, -3, -2, -3, -2, -2, -2, -4, -3, -4, -1, -1, -1, -5, -3, -5, -3, -2, -3, -2], // C
        [-2, -4,  8,  2, -5, -1, -1, -4, -1, -4, -4,  2, -1,  0, -2,  0, -1, -4, -5, -3, -5,  5, -4,  1, -1], // D
        [-1, -3,  2,  6, -3, -3,  0, -4,  1, -3, -2,  0, -1,  2,  0, -1, -1, -3, -3, -2, -5,  1, -3,  5, -1], // E
        [-3, -2, -5, -3,  8, -4, -1,  0, -4,  1,  0, -4, -4, -4, -3, -3, -2, -1,  1,  4, -5, -4,  1, -4, -2], // F
        [ 0, -3, -1, -3, -4,  8, -2, -4, -2, -4, -3,  0, -2, -2, -3,  0, -2, -4, -3, -3, -5, -1, -4, -2, -2], // G
        [-2, -3, -1,  0, -1, -2, 10, -4,  0, -3, -1,  1, -2,  1,  0, -1, -2, -4, -3,  2, -5,  0, -3,  0, -1], // H
        [-1, -2, -4, -4,  0, -4, -4,  5, -3,  2,  2, -3, -3, -3, -4, -3, -1,  4, -3, -1, -5, -4,  4, -3, -1], // I
        [-1, -3, -1,  1, -4, -2,  0, -3,  6, -3, -2,  0, -1,  2,  3,  0, -1, -3, -3, -2, -5,  0, -3,  1, -1], // K
        [-2, -2, -4, -3,  1, -4, -3,  2, -3,  5,  3, -4, -4, -2, -3, -3, -1,  1, -2, -1, -5, -4,  4, -3, -1], // L
        [-1, -2, -4, -2,  0, -3, -1,  2, -2,  3,  7, -2, -3,  0, -2, -2, -1,  1, -1,  0, -5, -3,  2, -1, -1], // M
        [-1, -2,  2,  0, -4,  0,  1, -3,  0, -4, -2,  7, -2,  0, -1,  1,  0, -3, -4, -2, -5,  4, -4,  0, -1], // N
        [-1, -4, -1, -1, -4, -2, -2, -3, -1, -4, -3, -2, 10, -1, -3, -1, -1, -3, -4, -3, -5, -2, -3, -1, -2], // P
        [-1, -3,  0,  2, -4, -2,  1, -3,  2, -2,  0,  0, -1,  7,  1,  0, -1, -3, -1, -1, -5,  0, -3,  4, -1], // Q
        [-2, -4, -2,  0, -3, -3,  0, -4,  3, -3, -2, -1, -3,  1,  7, -1, -1, -3, -3, -1, -5, -1, -3,  0, -1], // R
        [ 1, -1,  0, -1, -3,  0, -1, -3,  0, -3, -2,  1, -1,  0, -1,  5,  2, -2, -4, -2, -5,  0, -3,  0, -1], // S
        [ 0, -1, -1, -1, -2, -2, -2, -1, -1, -1, -1,  0, -1, -1, -1,  2,  5,  0, -3, -2, -5,  0, -1, -1,  0], // T
        [ 0, -1, -4, -3, -1, -4, -4,  4, -3,  1,  1, -3, -3, -3, -3, -2,  0,  5, -3, -1, -5, -4,  2, -3, -1], // V
        [-3, -5, -5, -3,  1, -3, -3, -3, -3, -2, -1, -4, -4, -1, -3, -4, -3, -3, 15,  2, -5, -5, -2, -2, -3], // W
        [-2, -3, -3, -2,  4, -3,  2, -1, -2, -1,  0, -2, -3, -1, -1, -2, -2, -1,  2,  8, -5, -3, -1, -2, -1], // Y
        [-5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,  1, -5, -5, -5, -5], // *
        [-2, -3,  5,  1, -4, -1,  0, -4,  0, -4, -3,  4, -2,  0, -1,  0,  0, -4, -5, -3, -5,  5, -4,  1, -1], // B
        [-2, -2, -4, -3,  1, -4, -3,  4, -3,  4,  2, -4, -3, -3, -3, -3, -1,  2, -2, -1, -5, -4,  4, -3, -1], // J
        [-1, -3,  1,  5, -4, -2,  0, -3,  1, -3, -1,  0, -1,  4,  0,  0, -1, -3, -2, -2, -5,  1, -3,  5, -1], // Z
        [-1, -2, -1, -1, -2, -2, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1,  0, -1, -3, -1, -5, -1, -1, -1, -1], // X
    ]
);

/// The BLOSUM55 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/3 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static BLOSUM_55: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       // A   C   D   E   F   G   H   I   K   L   M   N   P   Q   R   S   T   V   W   Y   *   B   J   Z   X  
        [ 5,  0, -2, -1, -3,  0, -2, -2, -1, -2, -1, -2, -1, -1, -2,  2,  0,  0, -4, -2, -5, -2, -2, -1, -1], // A
        [ 0, 13, -4, -4, -3, -3, -4, -2, -4, -2, -2, -3, -3, -4, -4, -1, -1, -1, -4, -3, -5, -4, -2, -4, -2], // C
        [-2, -4,  8,  2, -5, -2, -1, -4, -1, -5, -4,  2, -2,  0, -2,  0, -1, -4, -5, -3, -5,  5, -4,  1, -2], // D
        [-1, -4,  2,  7, -4, -3, -1, -4,  1, -4, -3,  0, -1,  2,  0,  0, -1, -3, -3, -2, -5,  1, -4,  5, -1], // E
        [-3, -3, -5, -4,  9, -4, -1,  0, -4,  1,  0, -4, -5, -4, -3, -3, -3, -1,  2,  4, -5, -5,  1, -4, -2], // F
        [ 0, -3, -2, -3, -4,  8, -2, -5, -2, -5, -3,  0, -3, -2, -3,  0, -2, -4, -3, -4, -5, -1, -5, -3, -2], // G
        [-2, -4, -1, -1, -1, -2, 11, -4,  0, -3, -2,  1, -3,  1,  0, -1, -2, -4, -3,  2, -5,  0, -4,  0, -1], // H
        [-2, -2, -4, -4,  0, -5, -4,  6, -4,  2,  2, -4, -3, -4, -4, -3, -1,  4, -3, -1, -5, -4,  4, -4, -1], // I
        [-1, -4, -1,  1, -4, -2,  0, -4,  6, -3, -2,  0, -1,  2,  3,  0, -1, -3, -4, -2, -5,  0, -4,  1, -1], // K
        [-2, -2, -5, -4,  1, -5, -3,  2, -3,  6,  3, -4, -4, -3, -3, -3, -2,  1, -3, -1, -5, -4,  4, -3, -1], // L
        [-1, -2, -4, -3,  0, -3, -2,  2, -2,  3,  8, -3, -3,  0, -2, -2, -1,  1, -2, -1, -5, -3,  2, -2, -1], // M
        [-2, -3,  2,  0, -4,  0,  1, -4,  0, -4, -3,  8, -2,  0, -1,  1,  0, -4, -5, -2, -5,  4, -4,  0, -1], // N
        [-1, -3, -2, -1, -5, -3, -3, -3, -1, -4, -3, -2, 10, -1, -3, -1, -1, -3, -5, -4, -5, -2, -4, -1, -2], // P
        [-1, -4,  0,  2, -4, -2,  1, -4,  2, -3,  0,  0, -1,  7,  1,  0, -1, -3, -2, -1, -5,  0, -3,  4, -1], // Q
        [-2, -4, -2,  0, -3, -3,  0, -4,  3, -3, -2, -1, -3,  1,  8, -1, -1, -3, -3, -2, -5, -1, -3,  0, -1], // R
        [ 2, -1,  0,  0, -3,  0, -1, -3,  0, -3, -2,  1, -1,  0, -1,  5,  2, -2, -4, -2, -5,  0, -3,  0, -1], // S
        [ 0, -1, -1, -1, -3, -2, -2, -1, -1, -2, -1,  0, -1, -1, -1,  2,  6,  0, -3, -2, -5, -1, -1, -1, -1], // T
        [ 0, -1, -4, -3, -1, -4, -4,  4, -3,  1,  1, -4, -3, -3, -3, -2,  0,  5, -4, -2, -5, -4,  2, -3, -1], // V
        [-4, -4, -5, -3,  2, -3, -3, -3, -4, -3, -2, -5, -5, -2, -3, -4, -3, -4, 15,  3, -5, -5, -3, -3, -3], // W
        [-2, -3, -3, -2,  4, -4,  2, -1, -2, -1, -1, -2, -4, -1, -2, -2, -2, -2,  3,  9, -5, -3, -1, -2, -1], // Y
        [-5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,  1, -5, -5, -5, -5], // *
        [-2, -4,  5,  1, -5, -1,  0, -4,  0, -4, -3,  4, -2,  0, -1,  0, -1, -4, -5, -3, -5,  5, -4,  1, -1], // B
        [-2, -2, -4, -4,  1, -5, -4,  4, -4,  4,  2, -4, -4, -3, -3, -3, -1,  2, -3, -1, -5, -4,  4, -4, -1], // J
        [-1, -4,  1,  5, -4, -3,  0, -4,  1, -3, -2,  0, -1,  4,  0,  0, -1, -3, -3, -2, -5,  1, -4,  5, -1], // Z
        [-1, -2, -2, -1, -2, -2, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -3, -1, -5, -1, -1, -1, -1], // X
    ]
);

/// The BLOSUM60 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/2 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static BLOSUM_60: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       // A   C   D   E   F   G   H   I   K   L   M   N   P   Q   R   S   T   V   W   Y   *   B   J   Z   X  
        [ 4,  0, -2, -1, -2,  0, -2, -1, -1, -1, -1, -1, -1, -1, -1,  1,  0,  0, -3, -2, -4, -2, -1, -1,  0], // A
        [ 0,  9, -3, -3, -2, -2, -3, -1, -3, -1, -1, -2, -3, -3, -3, -1, -1, -1, -2, -2, -4, -3, -1, -3, -2], // C
        [-2, -3,  6,  2, -3, -1, -1, -3, -1, -3, -3,  1, -1,  0, -1,  0, -1, -3, -4, -3, -4,  4, -3,  1, -1], // D
        [-1, -3,  2,  5, -3, -2,  0, -3,  1, -3, -2,  0, -1,  2,  0,  0, -1, -2, -3, -2, -4,  1, -3,  4, -1], // E
        [-2, -2, -3, -3,  6, -3, -1,  0, -3,  0,  0, -3, -4, -3, -3, -2, -2, -1,  1,  3, -4, -3,  0, -3, -1], // F
        [ 0, -2, -1, -2, -3,  6, -2, -3, -1, -4, -2,  0, -2, -2, -2,  0, -2, -3, -2, -3, -4, -1, -4, -2, -1], // G
        [-2, -3, -1,  0, -1, -2,  7, -3, -1, -3, -1,  1, -2,  1,  0, -1, -2, -3, -2,  2, -4,  0, -3,  0, -1], // H
        [-1, -1, -3, -3,  0, -3, -3,  4, -3,  2,  1, -3, -3, -3, -3, -2, -1,  3, -2, -1, -4, -3,  2, -3, -1], // I
        [-1, -3, -1,  1, -3, -1, -1, -3,  4, -2, -1,  0, -1,  1,  2,  0, -1, -2, -3, -2, -4,  0, -2,  1, -1], // K
        [-1, -1, -3, -3,  0, -4, -3,  2, -2,  4,  2, -3, -3, -2, -2, -2, -1,  1, -2, -1, -4, -3,  3, -2, -1], // L
        [-1, -1, -3, -2,  0, -2, -1,  1, -1,  2,  5, -2, -2,  0, -1, -1, -1,  1, -1, -1, -4, -3,  2, -1, -1], // M
        [-1, -2,  1,  0, -3,  0,  1, -3,  0, -3, -2,  6, -2,  0,  0,  1,  0, -3, -4, -2, -4,  3, -3,  0, -1], // N
        [-1, -3, -1, -1, -4, -2, -2, -3, -1, -3, -2, -2,  7, -1, -2, -1, -1, -2, -4, -3, -4, -2, -3, -1, -2], // P
        [-1, -3,  0,  2, -3, -2,  1, -3,  1, -2,  0,  0, -1,  5,  1,  0, -1, -2, -2, -1, -4,  0, -2,  3, -1], // Q
        [-1, -3, -1,  0, -3, -2,  0, -3,  2, -2, -1,  0, -2,  1,  5, -1, -1, -2, -3, -2, -4, -1, -2,  0, -1], // R
        [ 1, -1,  0,  0, -2,  0, -1, -2,  0, -2, -1,  1, -1,  0, -1,  4,  1, -2, -3, -2, -4,  0, -2,  0,  0], // S
        [ 0, -1, -1, -1, -2, -2, -2, -1, -1, -1, -1,  0, -1, -1, -1,  1,  4,  0, -2, -2, -4,  0, -1, -1,  0], // T
        [ 0, -1, -3, -2, -1, -3, -3,  3, -2,  1,  1, -3, -2, -2, -2, -2,  0,  4, -3, -1, -4, -3,  1, -2, -1], // V
        [-3, -2, -4, -3,  1, -2, -2, -2, -3, -2, -1, -4, -4, -2, -3, -3, -2, -3, 10,  2, -4, -4, -2, -2, -2], // W
        [-2, -2, -3, -2,  3, -3,  2, -1, -2, -1, -1, -2, -3, -1, -2, -2, -2, -1,  2,  6, -4, -2, -1, -2, -1], // Y
        [-4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,  1, -4, -4, -4, -4], // *
        [-2, -3,  4,  1, -3, -1,  0, -3,  0, -3, -3,  3, -2,  0, -1,  0,  0, -3, -4, -2, -4,  4, -3,  0, -1], // B
        [-1, -1, -3, -3,  0, -4, -3,  2, -2,  3,  2, -3, -3, -2, -2, -2, -1,  1, -2, -1, -4, -3,  3, -3, -1], // J
        [-1, -3,  1,  4, -3, -2,  0, -3,  1, -2, -1,  0, -1,  3,  0,  0, -1, -2, -2, -2, -4,  0, -3,  3, -1], // Z
        [ 0, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1,  0,  0, -1, -2, -1, -4, -1, -1, -1, -1], // X
    ]
);

/// The BLOSUM62 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/2 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static BLOSUM_62: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       // A   C   D   E   F   G   H   I   K   L   M   N   P   Q   R   S   T   V   W   Y   *   B   J   Z   X  
        [ 4,  0, -2, -1, -2,  0, -2, -1, -1, -1, -1, -2, -1, -1, -1,  1,  0,  0, -3, -2, -4, -2, -1, -1,  0], // A
        [ 0,  9, -3, -4, -2, -3, -3, -1, -3, -1, -1, -3, -3, -3, -3, -1, -1, -1, -2, -2, -4, -3, -1, -3, -2], // C
        [-2, -3,  6,  2, -3, -1, -1, -3, -1, -4, -3,  1, -1,  0, -2,  0, -1, -3, -4, -3, -4,  4, -3,  1, -1], // D
        [-1, -4,  2,  5, -3, -2,  0, -3,  1, -3, -2,  0, -1,  2,  0,  0, -1, -2, -3, -2, -4,  1, -3,  4, -1], // E
        [-2, -2, -3, -3,  6, -3, -1,  0, -3,  0,  0, -3, -4, -3, -3, -2, -2, -1,  1,  3, -4, -3,  0, -3, -1], // F
        [ 0, -3, -1, -2, -3,  6, -2, -4, -2, -4, -3,  0, -2, -2, -2,  0, -2, -3, -2, -3, -4, -1, -4, -2, -1], // G
        [-2, -3, -1,  0, -1, -2,  8, -3, -1, -3, -2,  1, -2,  0,  0, -1, -2, -3, -2,  2, -4,  0, -3,  0, -1], // H
        [-1, -1, -3, -3,  0, -4, -3,  4, -3,  2,  1, -3, -3, -3, -3, -2, -1,  3, -3, -1, -4, -3,  3, -3, -1], // I
        [-1, -3, -1,  1, -3, -2, -1, -3,  5, -2, -1,  0, -1,  1,  2,  0, -1, -2, -3, -2, -4,  0, -3,  1, -1], // K
        [-1, -1, -4, -3,  0, -4, -3,  2, -2,  4,  2, -3, -3, -2, -2, -2, -1,  1, -2, -1, -4, -4,  3, -3, -1], // L
        [-1, -1, -3, -2,  0, -3, -2,  1, -1,  2,  5, -2, -2,  0, -1, -1, -1,  1, -1, -1, -4, -3,  2, -1, -1], // M
        [-2, -3,  1,  0, -3,  0,  1, -3,  0, -3, -2,  6, -2,  0,  0,  1,  0, -3, -4, -2, -4,  3, -3,  0, -1], // N
        [-1, -3, -1, -1, -4, -2, -2, -3, -1, -3, -2, -2,  7, -1, -2, -1, -1, -2, -4, -3, -4, -2, -3, -1, -2], // P
        [-1, -3,  0,  2, -3, -2,  0, -3,  1, -2,  0,  0, -1,  5,  1,  0, -1, -2, -2, -1, -4,  0, -2,  3, -1], // Q
        [-1, -3, -2,  0, -3, -2,  0, -3,  2, -2, -1,  0, -2,  1,  5, -1, -1, -3, -3, -2, -4, -1, -2,  0, -1], // R
        [ 1, -1,  0,  0, -2,  0, -1, -2,  0, -2, -1,  1, -1,  0, -1,  4,  1, -2, -3, -2, -4,  0, -2,  0,  0], // S
        [ 0, -1, -1, -1, -2, -2, -2, -1, -1, -1, -1,  0, -1, -1, -1,  1,  5,  0, -2, -2, -4, -1, -1, -1,  0], // T
        [ 0, -1, -3, -2, -1, -3, -3,  3, -2,  1,  1, -3, -2, -2, -3, -2,  0,  4, -3, -1, -4, -3,  1, -2, -1], // V
        [-3, -2, -4, -3,  1, -2, -2, -3, -3, -2, -1, -4, -4, -2, -3, -3, -2, -3, 11,  2, -4, -4, -2, -3, -2], // W
        [-2, -2, -3, -2,  3, -3,  2, -1, -2, -1, -1, -2, -3, -1, -2, -2, -2, -1,  2,  7, -4, -3, -1, -2, -1], // Y
        [-4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,  1, -4, -4, -4, -4], // *
        [-2, -3,  4,  1, -3, -1,  0, -3,  0, -4, -3,  3, -2,  0, -1,  0, -1, -3, -4, -3, -4,  4, -3,  0, -1], // B
        [-1, -1, -3, -3,  0, -4, -3,  3, -3,  3,  2, -3, -3, -2, -2, -2, -1,  1, -2, -1, -4, -3,  3, -3, -1], // J
        [-1, -3,  1,  4, -3, -2,  0, -3,  1, -3, -1,  0, -1,  3,  0,  0, -1, -2, -3, -2, -4,  0, -3,  4, -1], // Z
        [ 0, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1,  0,  0, -1, -2, -1, -4, -1, -1, -1, -1], // X
    ]
);

/// The BLOSUM65 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/2 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static BLOSUM_65: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       // A   C   D   E   F   G   H   I   K   L   M   N   P   Q   R   S   T   V   W   Y   *   B   J   Z   X  
        [ 4,  0, -2, -1, -2,  0, -2, -1, -1, -2, -1, -2, -1, -1, -1,  1,  0,  0, -3, -2, -5, -2, -2, -1, -1], // A
        [ 0,  9, -4, -4, -2, -3, -3, -1, -3, -1, -2, -3, -3, -3, -4, -1, -1, -1, -2, -2, -5, -3, -1, -4, -2], // C
        [-2, -4,  6,  2, -4, -1, -1, -3, -1, -4, -3,  1, -2,  0, -2,  0, -1, -3, -5, -3, -5,  4, -4,  1, -1], // D
        [-1, -4,  2,  5, -3, -2,  0, -3,  1, -3, -2,  0, -1,  2,  0,  0, -1, -3, -3, -2, -5,  1, -3,  4, -1], // E
        [-2, -2, -4, -3,  6, -3, -1,  0, -3,  0,  0, -3, -4, -3, -3, -2, -2, -1,  1,  3, -5, -3,  0, -3, -2], // F
        [ 0, -3, -1, -2, -3,  6, -2, -4, -2, -4, -3, -1, -2, -2, -2,  0, -2, -3, -3, -3, -5, -1, -4, -2, -2], // G
        [-2, -3, -1,  0, -1, -2,  8, -3, -1, -3, -2,  1, -2,  1,  0, -1, -2, -3, -2,  2, -5,  0, -3,  0, -1], // H
        [-1, -1, -3, -3,  0, -4, -3,  4, -3,  2,  1, -3, -3, -3, -3, -2, -1,  3, -2, -1, -5, -3,  3, -3, -1], // I
        [-1, -3, -1,  1, -3, -2, -1, -3,  5, -3, -2,  0, -1,  1,  2,  0, -1, -2, -3, -2, -5,  0, -3,  1, -1], // K
        [-2, -1, -4, -3,  0, -4, -3,  2, -3,  4,  2, -4, -3, -2, -2, -3, -1,  1, -2, -1, -5, -4,  3, -3, -1], // L
        [-1, -2, -3, -2,  0, -3, -2,  1, -2,  2,  6, -2, -3,  0, -2, -2, -1,  1, -2, -1, -5, -3,  2, -2, -1], // M
        [-2, -3,  1,  0, -3, -1,  1, -3,  0, -4, -2,  6, -2,  0,  0,  1,  0, -3, -4, -2, -5,  3, -4,  0, -1], // N
        [-1, -3, -2, -1, -4, -2, -2, -3, -1, -3, -3, -2,  8, -1, -2, -1, -1, -2, -4, -3, -5, -2, -3, -1, -2], // P
        [-1, -3,  0,  2, -3, -2,  1, -3,  1, -2,  0,  0, -1,  6,  1,  0, -1, -2, -2, -2, -5,  0, -2,  3, -1], // Q
        [-1, -4, -2,  0, -3, -2,  0, -3,  2, -2, -2,  0, -2,  1,  6, -1, -1, -3, -3, -2, -5, -1, -3,  0, -1], // R
        [ 1, -1,  0,  0, -2,  0, -1, -2,  0, -3, -2,  1, -1,  0, -1,  4,  1, -2, -3, -2, -5,  0, -3,  0, -1], // S
        [ 0, -1, -1, -1, -2, -2, -2, -1, -1, -1, -1,  0, -1, -1, -1,  1,  5,  0, -3, -2, -5, -1, -1, -1, -1], // T
        [ 0, -1, -3, -3, -1, -3, -3,  3, -2,  1,  1, -3, -2, -2, -3, -2,  0,  4, -3, -1, -5, -3,  1, -2, -1], // V
        [-3, -2, -5, -3,  1, -3, -2, -2, -3, -2, -2, -4, -4, -2, -3, -3, -3, -3, 10,  2, -5, -4, -2, -3, -2], // W
        [-2, -2, -3, -2,  3, -3,  2, -1, -2, -1, -1, -2, -3, -2, -2, -2, -2, -1,  2,  7, -5, -3, -1, -2, -1], // Y
        [-5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,  1, -5, -5, -5, -5], // *
        [-2, -3,  4,  1, -3, -1,  0, -3,  0, -4, -3,  3, -2,  0, -1,  0, -1, -3, -4, -3, -5,  4, -4,  0, -1], // B
        [-2, -1, -4, -3,  0, -4, -3,  3, -3,  3,  2, -4, -3, -2, -3, -3, -1,  1, -2, -1, -5, -4,  3, -3, -1], // J
        [-1, -4,  1,  4, -3, -2,  0, -3,  1, -3, -2,  0, -1,  3,  0,  0, -1, -2, -3, -2, -5,  0, -3,  4, -1], // Z
        [-1, -2, -1, -1, -2, -2, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -2, -1, -5, -1, -1, -1, -1], // X
    ]
);

/// The BLOSUM70 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/2 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static BLOSUM_70: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       // A   C   D   E   F   G   H   I   K   L   M   N   P   Q   R   S   T   V   W   Y   *   B   J   Z   X  
        [ 4, -1, -2, -1, -2,  0, -2, -2, -1, -2, -1, -2, -1, -1, -2,  1,  0,  0, -3, -2, -5, -2, -2, -1, -1], // A
        [-1,  9, -4, -4, -2, -3, -4, -1, -4, -2, -2, -3, -3, -3, -4, -1, -1, -1, -3, -3, -5, -4, -2, -4, -2], // C
        [-2, -4,  6,  1, -4, -2, -1, -4, -1, -4, -3,  1, -2, -1, -2,  0, -1, -4, -5, -4, -5,  4, -4,  1, -2], // D
        [-1, -4,  1,  5, -4, -2,  0, -4,  1, -3, -2,  0, -1,  2,  0,  0, -1, -3, -4, -3, -5,  1, -3,  4, -1], // E
        [-2, -2, -4, -4,  6, -4, -1,  0, -3,  0,  0, -3, -4, -3, -3, -3, -2, -1,  1,  3, -5, -4,  0, -4, -2], // F
        [ 0, -3, -2, -2, -4,  6, -2, -4, -2, -4, -3, -1, -3, -2, -3, -1, -2, -4, -3, -4, -5, -1, -4, -2, -2], // G
        [-2, -4, -1,  0, -1, -2,  8, -4, -1, -3, -2,  0, -2,  1,  0, -1, -2, -3, -2,  2, -5, -1, -3,  0, -1], // H
        [-2, -1, -4, -4,  0, -4, -4,  4, -3,  2,  1, -4, -3, -3, -3, -3, -1,  3, -3, -1, -5, -4,  3, -3, -1], // I
        [-1, -4, -1,  1, -3, -2, -1, -3,  5, -3, -2,  0, -1,  1,  2,  0, -1, -3, -3, -2, -5, -1, -3,  1, -1], // K
        [-2, -2, -4, -3,  0, -4, -3,  2, -3,  4,  2, -4, -3, -2, -3, -3, -2,  1, -2, -1, -5, -4,  3, -3, -1], // L
        [-1, -2, -3, -2,  0, -3, -2,  1, -2,  2,  6, -2, -3,  0, -2, -2, -1,  1, -2, -1, -5, -3,  2, -2, -1], // M
        [-2, -3,  1,  0, -3, -1,  0, -4,  0, -4, -2,  6, -2,  0, -1,  0,  0, -3, -4, -2, -5,  3, -4,  0, -1], // N
        [-1, -3, -2, -1, -4, -3, -2, -3, -1, -3, -3, -2,  8, -2, -2, -1, -1, -3, -4, -3, -5, -2, -3, -1, -2], // P
        [-1, -3, -1,  2, -3, -2,  1, -3,  1, -2,  0,  0, -2,  6,  1,  0, -1, -2, -2, -2, -5,  0, -3,  3, -1], // Q
        [-2, -4, -2,  0, -3, -3,  0, -3,  2, -3, -2, -1, -2,  1,  6, -1, -1, -3, -3, -2, -5, -1, -3,  0, -1], // R
        [ 1, -1,  0,  0, -3, -1, -1, -3,  0, -3, -2,  0, -1,  0, -1,  4,  1, -2, -3, -2, -5,  0, -3,  0, -1], // S
        [ 0, -1, -1, -1, -2, -2, -2, -1, -1, -2, -1,  0, -1, -1, -1,  1,  5,  0, -3, -2, -5, -1, -1, -1, -1], // T
        [ 0, -1, -4, -3, -1, -4, -3,  3, -3,  1,  1, -3, -3, -2, -3, -2,  0,  4, -3, -2, -5, -3,  1, -3, -1], // V
        [-3, -3, -5, -4,  1, -3, -2, -3, -3, -2, -2, -4, -4, -2, -3, -3, -3, -3, 11,  2, -5, -4, -2, -3, -3], // W
        [-2, -3, -4, -3,  3, -4,  2, -1, -2, -1, -1, -2, -3, -2, -2, -2, -2, -2,  2,  7, -5, -3, -1, -2, -2], // Y
        [-5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,  1, -5, -5, -5, -5], // *
        [-2, -4,  4,  1, -4, -1, -1, -4, -1, -4, -3,  3, -2,  0, -1,  0, -1, -3, -4, -3, -5,  4, -4,  0, -1], // B
        [-2, -2, -4, -3,  0, -4, -3,  3, -3,  3,  2, -4, -3, -3, -3, -3, -1,  1, -2, -1, -5, -4,  3, -3, -1], // J
        [-1, -4,  1,  4, -4, -2,  0, -3,  1, -3, -2,  0, -1,  3,  0,  0, -1, -3, -3, -2, -5,  0, -3,  4, -1], // Z
        [-1, -2, -2, -1, -2, -2, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -3, -2, -5, -1, -1, -1, -1], // X
    ]
);

/// The BLOSUM75 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/2 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static BLOSUM_75: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       // A   C   D   E   F   G   H   I   K   L   M   N   P   Q   R   S   T   V   W   Y   *   B   J   Z   X  
        [ 4, -1, -2, -1, -3,  0, -2, -2, -1, -2, -1, -2, -1, -1, -2,  1,  0,  0, -3, -2, -5, -2, -2, -1, -1], // A
        [-1,  9, -4, -5, -2, -3, -4, -1, -4, -2, -2, -3, -4, -3, -4, -1, -1, -1, -3, -3, -5, -4, -2, -4, -2], // C
        [-2, -4,  6,  1, -4, -2, -1, -4, -1, -4, -4,  1, -2, -1, -2, -1, -1, -4, -5, -4, -5,  4, -4,  1, -2], // D
        [-1, -5,  1,  5, -4, -3,  0, -4,  1, -4, -2, -1, -1,  2,  0,  0, -1, -3, -4, -3, -5,  1, -4,  4, -1], // E
        [-3, -2, -4, -4,  6, -4, -2,  0, -4,  0,  0, -4, -4, -4, -3, -3, -2, -1,  1,  3, -5, -4,  0, -4, -2], // F
        [ 0, -3, -2, -3, -4,  6, -2, -5, -2, -4, -3, -1, -3, -2, -3, -1, -2, -4, -3, -4, -5, -1, -4, -2, -2], // G
        [-2, -4, -1,  0, -2, -2,  8, -4, -1, -3, -2,  0, -2,  1,  0, -1, -2, -4, -2,  2, -5, -1, -3,  0, -1], // H
        [-2, -1, -4, -4,  0, -5, -4,  4, -3,  1,  1, -4, -3, -3, -3, -3, -1,  3, -3, -2, -5, -4,  3, -4, -2], // I
        [-1, -4, -1,  1, -4, -2, -1, -3,  5, -3, -2,  0, -1,  1,  2,  0, -1, -3, -4, -2, -5, -1, -3,  1, -1], // K
        [-2, -2, -4, -4,  0, -4, -3,  1, -3,  4,  2, -4, -3, -3, -3, -3, -2,  1, -2, -1, -5, -4,  3, -3, -1], // L
        [-1, -2, -4, -2,  0, -3, -2,  1, -2,  2,  6, -3, -3,  0, -2, -2, -1,  1, -2, -2, -5, -3,  2, -2, -1], // M
        [-2, -3,  1, -1, -4, -1,  0, -4,  0, -4, -3,  6, -3,  0, -1,  0,  0, -3, -4, -3, -5,  3, -4,  0, -1], // N
        [-1, -4, -2, -1, -4, -3, -2, -3, -1, -3, -3, -3,  8, -2, -2, -1, -1, -3, -5, -4, -5, -2, -3, -2, -2], // P
        [-1, -3, -1,  2, -4, -2,  1, -3,  1, -3,  0,  0, -2,  6,  1,  0, -1, -2, -2, -2, -5,  0, -3,  3, -1], // Q
        [-2, -4, -2,  0, -3, -3,  0, -3,  2, -3, -2, -1, -2,  1,  6, -1, -1, -3, -3, -2, -5, -1, -3,  0, -1], // R
        [ 1, -1, -1,  0, -3, -1, -1, -3,  0, -3, -2,  0, -1,  0, -1,  5,  1, -2, -3, -2, -5,  0, -3,  0, -1], // S
        [ 0, -1, -1, -1, -2, -2, -2, -1, -1, -2, -1,  0, -1, -1, -1,  1,  5,  0, -3, -2, -5, -1, -1, -1, -1], // T
        [ 0, -1, -4, -3, -1, -4, -4,  3, -3,  1,  1, -3, -3, -2, -3, -2,  0,  4, -3, -2, -5, -4,  1, -3, -1], // V
        [-3, -3, -5, -4,  1, -3, -2, -3, -4, -2, -2, -4, -5, -2, -3, -3, -3, -3, 11,  2, -5, -5, -2, -3, -3], // W
        [-2, -3, -4, -3,  3, -4,  2, -2, -2, -1, -2, -3, -4, -2, -2, -2, -2, -2,  2,  7, -5, -3, -1, -3, -2], // Y
        [-5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,  1, -5, -5, -5, -5], // *
        [-2, -4,  4,  1, -4, -1, -1, -4, -1, -4, -3,  3, -2,  0, -1,  0, -1, -4, -5, -3, -5,  4, -4,  0, -2], // B
        [-2, -2, -4, -4,  0, -4, -3,  3, -3,  3,  2, -4, -3, -3, -3, -3, -1,  1, -2, -1, -5, -4,  3, -3, -2], // J
        [-1, -4,  1,  4, -4, -2,  0, -4,  1, -3, -2,  0, -2,  3,  0,  0, -1, -3, -3, -3, -5,  0, -3,  4, -1], // Z
        [-1, -2, -2, -1, -2, -2, -1, -2, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -3, -2, -5, -2, -2, -1, -1], // X
    ]
);

/// The BLOSUM80 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/3 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static BLOSUM_80: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       // A   C   D   E   F   G   H   I   K   L   M   N   P   Q   R   S   T   V   W   Y   *   B   J   Z   X  
        [ 7, -1, -3, -2, -4,  0, -3, -3, -1, -3, -2, -3, -1, -2, -3,  2,  0, -1, -5, -4, -8, -3, -3, -2, -1], // A
        [-1, 13, -7, -7, -4, -6, -7, -2, -6, -3, -3, -5, -6, -5, -6, -2, -2, -2, -5, -5, -8, -6, -3, -7, -4], // C
        [-3, -7, 10,  2, -6, -3, -2, -7, -2, -7, -6,  2, -3, -1, -3, -1, -2, -6, -8, -6, -8,  6, -7,  1, -3], // D
        [-2, -7,  2,  8, -6, -4,  0, -6,  1, -6, -4, -1, -2,  3, -1, -1, -2, -4, -6, -5, -8,  1, -6,  6, -2], // E
        [-4, -4, -6, -6, 10, -6, -2, -1, -5,  0,  0, -6, -6, -5, -5, -4, -4, -2,  0,  4, -8, -6,  0, -6, -3], // F
        [ 0, -6, -3, -4, -6,  9, -4, -7, -3, -7, -5, -1, -5, -4, -4, -1, -3, -6, -6, -6, -8, -2, -7, -4, -3], // G
        [-3, -7, -2,  0, -2, -4, 12, -6, -1, -5, -4,  1, -4,  1,  0, -2, -3, -5, -4,  3, -8, -1, -5,  0, -2], // H
        [-3, -2, -7, -6, -1, -7, -6,  7, -5,  2,  2, -6, -5, -5, -5, -4, -2,  4, -5, -3, -8, -6,  4, -6, -2], // I
        [-1, -6, -2,  1, -5, -3, -1, -5,  8, -4, -3,  0, -2,  2,  3, -1, -1, -4, -6, -4, -8, -1, -5,  1, -2], // K
        [-3, -3, -7, -6,  0, -7, -5,  2, -4,  6,  3, -6, -5, -4, -4, -4, -3,  1, -4, -2, -8, -7,  5, -5, -2], // L
        [-2, -3, -6, -4,  0, -5, -4,  2, -3,  3,  9, -4, -4, -1, -3, -3, -1,  1, -3, -3, -8, -5,  3, -3, -2], // M
        [-3, -5,  2, -1, -6, -1,  1, -6,  0, -6, -4,  9, -4,  0, -1,  1,  0, -5, -7, -4, -8,  5, -6, -1, -2], // N
        [-1, -6, -3, -2, -6, -5, -4, -5, -2, -5, -4, -4, 12, -3, -3, -2, -3, -4, -7, -6, -8, -4, -5, -2, -3], // P
        [-2, -5, -1,  3, -5, -4,  1, -5,  2, -4, -1,  0, -3,  9,  1, -1, -1, -4, -4, -3, -8, -1, -4,  5, -2], // Q
        [-3, -6, -3, -1, -5, -4,  0, -5,  3, -4, -3, -1, -3,  1,  9, -2, -2, -4, -5, -4, -8, -2, -5,  0, -2], // R
        [ 2, -2, -1, -1, -4, -1, -2, -4, -1, -4, -3,  1, -2, -1, -2,  7,  2, -3, -6, -3, -8,  0, -4, -1, -1], // S
        [ 0, -2, -2, -2, -4, -3, -3, -2, -1, -3, -1,  0, -3, -1, -2,  2,  8,  0, -5, -3, -8, -1, -2, -2, -1], // T
        [-1, -2, -6, -4, -2, -6, -5,  4, -4,  1,  1, -5, -4, -4, -4, -3,  0,  7, -5, -3, -8, -6,  2, -4, -2], // V
        [-5, -5, -8, -6,  0, -6, -4, -5, -6, -4, -3, -7, -7, -4, -5, -6, -5, -5, 16,  3, -8, -8, -4, -5, -5], // W
        [-4, -5, -6, -5,  4, -6,  3, -3, -4, -2, -3, -4, -6, -3, -4, -3, -3, -3,  3, 11, -8, -5, -2, -4, -3], // Y
        [-8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8,  1, -8, -8, -8, -8], // *
        [-3, -6,  6,  1, -6, -2, -1, -6, -1, -7, -5,  5, -4, -1, -2,  0, -1, -6, -8, -5, -8,  6, -6,  0, -3], // B
        [-3, -3, -7, -6,  0, -7, -5,  4, -5,  5,  3, -6, -5, -4, -5, -4, -2,  2, -4, -2, -8, -6,  4, -5, -2], // J
        [-2, -7,  1,  6, -6, -4,  0, -6,  1, -5, -3, -1, -2,  5,  0, -1, -2, -4, -5, -4, -8,  0, -5,  6, -2], // Z
        [-1, -4, -3, -2, -3, -3, -2, -2, -2, -2, -2, -2, -3, -2, -2, -1, -1, -2, -5, -3, -8, -3, -2, -2, -2], // X
    ]
);

/// The BLOSUM85 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/2 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static BLOSUM_85: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       // A   C   D   E   F   G   H   I   K   L   M   N   P   Q   R   S   T   V   W   Y   *   B   J   Z   X  
        [ 5, -1, -2, -1, -3,  0, -2, -2, -1, -2, -2, -2, -1, -1, -2,  1,  0, -1, -3, -3, -6, -2, -2, -1, -1], // A
        [-1,  9, -5, -5, -3, -4, -5, -2, -4, -2, -2, -4, -4, -4, -4, -2, -2, -1, -4, -3, -6, -4, -2, -5, -3], // C
        [-2, -5,  7,  1, -4, -2, -2, -5, -1, -5, -4,  1, -2, -1, -2, -1, -2, -4, -6, -4, -6,  4, -5,  1, -2], // D
        [-1, -5,  1,  6, -4, -3, -1, -4,  0, -4, -3, -1, -2,  2, -1, -1, -1, -3, -4, -4, -6,  0, -4,  4, -1], // E
        [-3, -3, -4, -4,  7, -4, -2, -1, -4,  0, -1, -4, -4, -4, -4, -3, -3, -1,  0,  3, -6, -4,  0, -4, -2], // F
        [ 0, -4, -2, -3, -4,  6, -3, -5, -2, -5, -4, -1, -3, -3, -3, -1, -2, -4, -4, -5, -6, -1, -5, -3, -2], // G
        [-2, -5, -2, -1, -2, -3,  8, -4, -1, -3, -3,  0, -3,  1,  0, -1, -2, -4, -3,  2, -6, -1, -4,  0, -2], // H
        [-2, -2, -5, -4, -1, -5, -4,  5, -3,  1,  1, -4, -4, -4, -4, -3, -1,  3, -3, -2, -6, -5,  3, -4, -2], // I
        [-1, -4, -1,  0, -4, -2, -1, -3,  6, -3, -2,  0, -2,  1,  2, -1, -1, -3, -5, -3, -6, -1, -3,  1, -1], // K
        [-2, -2, -5, -4,  0, -5, -3,  1, -3,  4,  2, -4, -4, -3, -3, -3, -2,  0, -3, -2, -6, -5,  3, -4, -2], // L
        [-2, -2, -4, -3, -1, -4, -3,  1, -2,  2,  7, -3, -3,  0, -2, -2, -1,  0, -2, -2, -6, -4,  2, -2, -1], // M
        [-2, -4,  1, -1, -4, -1,  0, -4,  0, -4, -3,  7, -3,  0, -1,  0,  0, -4, -5, -3, -6,  4, -4, -1, -2], // N
        [-1, -4, -2, -2, -4, -3, -3, -4, -2, -4, -3, -3,  8, -2, -2, -1, -2, -3, -5, -4, -6, -3, -4, -2, -2], // P
        [-1, -4, -1,  2, -4, -3,  1, -4,  1, -3,  0,  0, -2,  6,  1, -1, -1, -3, -3, -2, -6, -1, -3,  4, -1], // Q
        [-2, -4, -2, -1, -4, -3,  0, -4,  2, -3, -2, -1, -2,  1,  6, -1, -2, -3, -4, -3, -6, -2, -3,  0, -2], // R
        [ 1, -2, -1, -1, -3, -1, -1, -3, -1, -3, -2,  0, -1, -1, -1,  5,  1, -2, -4, -2, -6,  0, -3, -1, -1], // S
        [ 0, -2, -2, -1, -3, -2, -2, -1, -1, -2, -1,  0, -2, -1, -2,  1,  5,  0, -4, -2, -6, -1, -2, -1, -1], // T
        [-1, -1, -4, -3, -1, -4, -4,  3, -3,  0,  0, -4, -3, -3, -3, -2,  0,  5, -3, -2, -6, -4,  1, -3, -1], // V
        [-3, -4, -6, -4,  0, -4, -3, -3, -5, -3, -2, -5, -5, -3, -4, -4, -4, -3, 11,  2, -6, -5, -3, -4, -3], // W
        [-3, -3, -4, -4,  3, -5,  2, -2, -3, -2, -2, -3, -4, -2, -3, -2, -2, -2,  2,  7, -6, -4, -2, -3, -2], // Y
        [-6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6,  1, -6, -6, -6, -6], // *
        [-2, -4,  4,  0, -4, -1, -1, -5, -1, -5, -4,  4, -3, -1, -2,  0, -1, -4, -5, -4, -6,  4, -5,  0, -2], // B
        [-2, -2, -5, -4,  0, -5, -4,  3, -3,  3,  2, -4, -4, -3, -3, -3, -2,  1, -3, -2, -6, -5,  3, -4, -2], // J
        [-1, -5,  1,  4, -4, -3,  0, -4,  1, -4, -2, -1, -2,  4,  0, -1, -1, -3, -4, -3, -6,  0, -4,  4, -1], // Z
        [-1, -3, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -1, -2, -1, -1, -1, -3, -2, -6, -2, -2, -1, -2], // X
    ]
);

/// The BLOSUM90 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/2 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static BLOSUM_90: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       // A   C   D   E   F   G   H   I   K   L   M   N   P   Q   R   S   T   V   W   Y   *   B   J   Z   X  
        [ 5, -1, -3, -1, -3,  0, -2, -2, -1, -2, -2, -2, -1, -1, -2,  1,  0, -1, -4, -3, -6, -2, -2, -1, -1], // A
        [-1,  9, -5, -6, -3, -4, -5, -2, -4, -2, -2, -4, -4, -4, -5, -2, -2, -2, -4, -4, -6, -4, -2, -5, -3], // C
        [-3, -5,  7,  1, -5, -2, -2, -5, -1, -5, -4,  1, -3, -1, -3, -1, -2, -5, -6, -4, -6,  4, -5,  0, -2], // D
        [-1, -6,  1,  6, -5, -3, -1, -4,  0, -4, -3, -1, -2,  2, -1, -1, -1, -3, -5, -4, -6,  0, -4,  4, -2], // E
        [-3, -3, -5, -5,  7, -5, -2, -1, -4,  0, -1, -4, -4, -4, -4, -3, -3, -2,  0,  3, -6, -4,  0, -4, -2], // F
        [ 0, -4, -2, -3, -5,  6, -3, -5, -2, -5, -4, -1, -3, -3, -3, -1, -3, -5, -4, -5, -6, -2, -5, -3, -2], // G
        [-2, -5, -2, -1, -2, -3,  8, -4, -1, -4, -3,  0, -3,  1,  0, -2, -2, -4, -3,  1, -6, -1, -4,  0, -2], // H
        [-2, -2, -5, -4, -1, -5, -4,  5, -4,  1,  1, -4, -4, -4, -4, -3, -1,  3, -4, -2, -6, -5,  3, -4, -2], // I
        [-1, -4, -1,  0, -4, -2, -1, -4,  6, -3, -2,  0, -2,  1,  2, -1, -1, -3, -5, -3, -6, -1, -3,  1, -1], // K
        [-2, -2, -5, -4,  0, -5, -4,  1, -3,  5,  2, -4, -4, -3, -3, -3, -2,  0, -3, -2, -6, -5,  3, -4, -2], // L
        [-2, -2, -4, -3, -1, -4, -3,  1, -2,  2,  7, -3, -3,  0, -2, -2, -1,  0, -2, -2, -6, -4,  2, -2, -1], // M
        [-2, -4,  1, -1, -4, -1,  0, -4,  0, -4, -3,  7, -3,  0, -1,  0,  0, -4, -5, -3, -6,  4, -4, -1, -2], // N
        [-1, -4, -3, -2, -4, -3, -3, -4, -2, -4, -3, -3,  8, -2, -3, -2, -2, -3, -5, -4, -6, -3, -4, -2, -2], // P
        [-1, -4, -1,  2, -4, -3,  1, -4,  1, -3,  0,  0, -2,  7,  1, -1, -1, -3, -3, -3, -6, -1, -3,  4, -1], // Q
        [-2, -5, -3, -1, -4, -3,  0, -4,  2, -3, -2, -1, -3,  1,  6, -1, -2, -3, -4, -3, -6, -2, -3,  0, -2], // R
        [ 1, -2, -1, -1, -3, -1, -2, -3, -1, -3, -2,  0, -2, -1, -1,  5,  1, -2, -4, -3, -6,  0, -3, -1, -1], // S
        [ 0, -2, -2, -1, -3, -3, -2, -1, -1, -2, -1,  0, -2, -1, -2,  1,  6, -1, -4, -2, -6, -1, -2, -1, -1], // T
        [-1, -2, -5, -3, -2, -5, -4,  3, -3,  0,  0, -4, -3, -3, -3, -2, -1,  5, -3, -3, -6, -4,  1, -3, -2], // V
        [-4, -4, -6, -5,  0, -4, -3, -4, -5, -3, -2, -5, -5, -3, -4, -4, -4, -3, 11,  2, -6, -6, -3, -4, -3], // W
        [-3, -4, -4, -4,  3, -5,  1, -2, -3, -2, -2, -3, -4, -3, -3, -3, -2, -3,  2,  8, -6, -4, -2, -3, -2], // Y
        [-6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6,  1, -6, -6, -6, -6], // *
        [-2, -4,  4,  0, -4, -2, -1, -5, -1, -5, -4,  4, -3, -1, -2,  0, -1, -4, -6, -4, -6,  4, -5,  0, -2], // B
        [-2, -2, -5, -4,  0, -5, -4,  3, -3,  3,  2, -4, -4, -3, -3, -3, -2,  1, -3, -2, -6, -5,  3, -4, -2], // J
        [-1, -5,  0,  4, -4, -3,  0, -4,  1, -4, -2, -1, -2,  4,  0, -1, -1, -3, -4, -3, -6,  0, -4,  4, -1], // Z
        [-1, -3, -2, -2, -2, -2, -2, -2, -1, -2, -1, -2, -2, -1, -2, -1, -1, -2, -3, -2, -6, -2, -2, -1, -2], // X
    ]
);

/// The BLOSUM95 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/2 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static BLOSUM_95: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       // A   C   D   E   F   G   H   I   K   L   M   N   P   Q   R   S   T   V   W   Y   *   B   J   Z   X  
        [ 5, -1, -3, -1, -3, -1, -3, -2, -1, -2, -2, -2, -1, -1, -2,  1,  0, -1, -4, -3, -6, -3, -2, -1, -1], // A
        [-1,  9, -5, -6, -3, -5, -5, -2, -5, -3, -3, -4, -5, -4, -5, -2, -2, -2, -4, -4, -6, -4, -2, -5, -3], // C
        [-3, -5,  7,  1, -5, -2, -2, -5, -2, -5, -5,  1, -3, -1, -3, -1, -2, -5, -6, -5, -6,  4, -5,  0, -2], // D
        [-1, -6,  1,  6, -5, -3, -1, -4,  0, -4, -3, -1, -2,  2, -1, -1, -2, -3, -5, -4, -6,  0, -4,  4, -2], // E
        [-3, -3, -5, -5,  7, -5, -2, -1, -4,  0, -1, -4, -5, -4, -4, -3, -3, -2,  0,  3, -6, -5,  0, -4, -2], // F
        [-1, -5, -2, -3, -5,  6, -3, -6, -3, -5, -4, -1, -4, -3, -4, -1, -3, -5, -5, -5, -6, -2, -5, -3, -3], // G
        [-3, -5, -2, -1, -2, -3,  9, -4, -1, -4, -3,  0, -3,  1, -1, -2, -2, -4, -3,  1, -6, -1, -4,  0, -2], // H
        [-2, -2, -5, -4, -1, -6, -4,  5, -4,  1,  1, -4, -4, -4, -4, -3, -2,  3, -4, -2, -6, -5,  3, -4, -2], // I
        [-1, -5, -2,  0, -4, -3, -1, -4,  6, -3, -2,  0, -2,  1,  2, -1, -1, -3, -5, -3, -6, -1, -4,  0, -1], // K
        [-2, -3, -5, -4,  0, -5, -4,  1, -3,  5,  2, -5, -4, -3, -3, -3, -2,  0, -3, -2, -6, -5,  3, -4, -2], // L
        [-2, -3, -5, -3, -1, -4, -3,  1, -2,  2,  7, -3, -3, -1, -2, -3, -1,  0, -2, -3, -6, -4,  2, -2, -2], // M
        [-2, -4,  1, -1, -4, -1,  0, -4,  0, -5, -3,  7, -3,  0, -1,  0, -1, -4, -5, -3, -6,  4, -4, -1, -2], // N
        [-1, -5, -3, -2, -5, -4, -3, -4, -2, -4, -3, -3,  8, -2, -3, -2, -2, -4, -5, -5, -6, -3, -4, -2, -3], // P
        [-1, -4, -1,  2, -4, -3,  1, -4,  1, -3, -1,  0, -2,  7,  0, -1, -1, -3, -3, -3, -6, -1, -3,  4, -1], // Q
        [-2, -5, -3, -1, -4, -4, -1, -4,  2, -3, -2, -1, -3,  0,  7, -2, -2, -4, -4, -3, -6, -2, -4, -1, -2], // R
        [ 1, -2, -1, -1, -3, -1, -2, -3, -1, -3, -3,  0, -2, -1, -2,  5,  1, -3, -4, -3, -6, -1, -3, -1, -1], // S
        [ 0, -2, -2, -2, -3, -3, -2, -2, -1, -2, -1, -1, -2, -1, -2,  1,  6, -1, -4, -3, -6, -1, -2, -2, -1], // T
        [-1, -2, -5, -3, -2, -5, -4,  3, -3,  0,  0, -4, -4, -3, -4, -3, -1,  5, -3, -3, -6, -5,  1, -3, -2], // V
        [-4, -4, -6, -5,  0, -5, -3, -4, -5, -3, -2, -5, -5, -3, -4, -4, -4, -3, 11,  2, -6, -6, -3, -4, -4], // W
        [-3, -4, -5, -4,  3, -5,  1, -2, -3, -2, -3, -3, -5, -3, -3, -3, -3, -3,  2,  8, -6, -4, -2, -4, -2], // Y
        [-6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6,  1, -6, -6, -6, -6], // *
        [-3, -4,  4,  0, -5, -2, -1, -5, -1, -5, -4,  4, -3, -1, -2, -1, -1, -5, -6, -4, -6,  4, -5,  0, -2], // B
        [-2, -2, -5, -4,  0, -5, -4,  3, -4,  3,  2, -4, -4, -3, -4, -3, -2,  1, -3, -2, -6, -5,  3, -4, -2], // J
        [-1, -5,  0,  4, -4, -3,  0, -4,  0, -4, -2, -1, -2,  4, -1, -1, -2, -3, -4, -4, -6,  0, -4,  4, -2], // Z
        [-1, -3, -2, -2, -2, -3, -2, -2, -1, -2, -2, -2, -3, -1, -2, -1, -1, -2, -4, -2, -6, -2, -2, -2, -2], // X
    ]
);

/// The BLOSUM100 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/3 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static BLOSUM_100: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       //  A    C    D    E    F    G    H    I    K    L    M    N    P    Q    R    S    T    V    W    Y    *    B    J    Z    X  
        [  8,  -2,  -5,  -3,  -5,  -1,  -4,  -4,  -2,  -4,  -3,  -4,  -2,  -2,  -3,   1,  -1,  -2,  -6,  -5, -10,  -4,  -4,  -2,  -2], // A
        [ -2,  14,  -8,  -9,  -4,  -7,  -8,  -3,  -8,  -5,  -4,  -5,  -8,  -7,  -8,  -3,  -3,  -3,  -7,  -6, -10,  -7,  -4,  -8,  -5], // C
        [ -5,  -8,  10,   2,  -8,  -4,  -3,  -8,  -3,  -8,  -8,   1,  -5,  -2,  -5,  -2,  -4,  -8, -10,  -7, -10,   6,  -8,   0,  -4], // D
        [ -3,  -9,   2,  10,  -8,  -6,  -2,  -7,   0,  -7,  -5,  -2,  -4,   2,  -2,  -2,  -3,  -5,  -8,  -7, -10,   0,  -7,   7,  -3], // E
        [ -5,  -4,  -8,  -8,  11,  -8,  -4,  -2,  -6,   0,  -1,  -7,  -7,  -6,  -6,  -5,  -5,  -3,   0,   4, -10,  -7,  -1,  -7,  -4], // F
        [ -1,  -7,  -4,  -6,  -8,   9,  -6,  -9,  -5,  -8,  -7,  -2,  -6,  -5,  -6,  -2,  -5,  -8,  -7,  -8, -10,  -3,  -9,  -5,  -4], // G
        [ -4,  -8,  -3,  -2,  -4,  -6,  13,  -7,  -3,  -6,  -5,   0,  -5,   1,  -1,  -3,  -4,  -7,  -5,   1, -10,  -2,  -6,  -1,  -4], // H
        [ -4,  -3,  -8,  -7,  -2,  -9,  -7,   8,  -6,   2,   1,  -7,  -7,  -6,  -7,  -5,  -3,   4,  -6,  -4, -10,  -8,   4,  -7,  -3], // I
        [ -2,  -8,  -3,   0,  -6,  -5,  -3,  -6,  10,  -6,  -4,  -1,  -3,   2,   3,  -2,  -3,  -5,  -8,  -5, -10,  -2,  -6,   0,  -3], // K
        [ -4,  -5,  -8,  -7,   0,  -8,  -6,   2,  -6,   8,   3,  -7,  -7,  -5,  -6,  -6,  -4,   0,  -5,  -4, -10,  -8,   5,  -6,  -3], // L
        [ -3,  -4,  -8,  -5,  -1,  -7,  -5,   1,  -4,   3,  12,  -5,  -5,  -2,  -4,  -4,  -2,   0,  -4,  -5, -10,  -7,   2,  -4,  -3], // M
        [ -4,  -5,   1,  -2,  -7,  -2,   0,  -7,  -1,  -7,  -5,  11,  -5,  -1,  -2,   0,  -1,  -7,  -8,  -5, -10,   5,  -7,  -2,  -3], // N
        [ -2,  -8,  -5,  -4,  -7,  -6,  -5,  -7,  -3,  -7,  -5,  -5,  12,  -4,  -5,  -3,  -4,  -6,  -8,  -7, -10,  -5,  -7,  -4,  -4], // P
        [ -2,  -7,  -2,   2,  -6,  -5,   1,  -6,   2,  -5,  -2,  -1,  -4,  11,   0,  -2,  -3,  -5,  -5,  -4, -10,  -2,  -5,   5,  -2], // Q
        [ -3,  -8,  -5,  -2,  -6,  -6,  -1,  -7,   3,  -6,  -4,  -2,  -5,   0,  10,  -3,  -3,  -6,  -7,  -5, -10,  -4,  -6,  -1,  -3], // R
        [  1,  -3,  -2,  -2,  -5,  -2,  -3,  -5,  -2,  -6,  -4,   0,  -3,  -2,  -3,   9,   2,  -4,  -7,  -5, -10,  -1,  -5,  -2,  -2], // S
        [ -1,  -3,  -4,  -3,  -5,  -5,  -4,  -3,  -3,  -4,  -2,  -1,  -4,  -3,  -3,   2,   9,  -1,  -7,  -5, -10,  -2,  -3,  -3,  -2], // T
        [ -2,  -3,  -8,  -5,  -3,  -8,  -7,   4,  -5,   0,   0,  -7,  -6,  -5,  -6,  -4,  -1,   8,  -5,  -5, -10,  -7,   2,  -5,  -3], // V
        [ -6,  -7, -10,  -8,   0,  -7,  -5,  -6,  -8,  -5,  -4,  -8,  -8,  -5,  -7,  -7,  -7,  -5,  17,   2, -10,  -9,  -6,  -7,  -6], // W
        [ -5,  -6,  -7,  -7,   4,  -8,   1,  -4,  -5,  -4,  -5,  -5,  -7,  -4,  -5,  -5,  -5,  -5,   2,  12, -10,  -6,  -4,  -6,  -4], // Y
        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,   1, -10, -10, -10, -10], // *
        [ -4,  -7,   6,   0,  -7,  -3,  -2,  -8,  -2,  -8,  -7,   5,  -5,  -2,  -4,  -1,  -2,  -7,  -9,  -6, -10,   6,  -8,  -1,  -4], // B
        [ -4,  -4,  -8,  -7,  -1,  -9,  -6,   4,  -6,   5,   2,  -7,  -7,  -5,  -6,  -5,  -3,   2,  -6,  -4, -10,  -8,   5,  -6,  -3], // J
        [ -2,  -8,   0,   7,  -7,  -5,  -1,  -7,   0,  -6,  -4,  -2,  -4,   5,  -1,  -2,  -3,  -5,  -7,  -6, -10,  -1,  -6,   6,  -3], // Z
        [ -2,  -5,  -4,  -3,  -4,  -4,  -4,  -3,  -3,  -3,  -3,  -3,  -4,  -2,  -3,  -2,  -2,  -3,  -6,  -4, -10,  -4,  -3,  -3,  -3], // X
    ]
);

/// The PAM30 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/2 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static PAM_30: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       //  A    C    D    E    F    G    H    I    K    L    M    N    P    Q    R    S    T    V    W    Y    *    B    J    Z    X  
        [  6,  -6,  -3,  -2,  -8,  -2,  -7,  -5,  -7,  -6,  -5,  -4,  -2,  -4,  -7,   0,  -1,  -2, -13,  -8, -17,  -3,  -6,  -3,  -3], // A
        [ -6,  10, -14, -14, -13,  -9,  -7,  -6, -14, -15, -13, -11,  -8, -14,  -8,  -3,  -8,  -6, -15,  -4, -17, -12,  -9, -14,  -9], // C
        [ -3, -14,   8,   2, -15,  -3,  -4,  -7,  -4, -12, -11,   2,  -8,  -2, -10,  -4,  -5,  -8, -15, -11, -17,   6, -10,   1,  -5], // D
        [ -2, -14,   2,   8, -14,  -4,  -5,  -5,  -4,  -9,  -7,  -2,  -5,   1,  -9,  -4,  -6,  -6, -17,  -8, -17,   1,  -7,   6,  -5], // E
        [ -8, -13, -15, -14,   9,  -9,  -6,  -2, -14,  -3,  -4,  -9, -10, -13,  -9,  -6,  -9,  -8,  -4,   2, -17, -10,  -2, -13,  -8], // F
        [ -2,  -9,  -3,  -4,  -9,   6,  -9, -11,  -7, -10,  -8,  -3,  -6,  -7,  -9,  -2,  -6,  -5, -15, -14, -17,  -3, -10,  -5,  -5], // G
        [ -7,  -7,  -4,  -5,  -6,  -9,   9,  -9,  -6,  -6, -10,   0,  -4,   1,  -2,  -6,  -7,  -6,  -7,  -3, -17,  -1,  -7,  -1,  -5], // H
        [ -5,  -6,  -7,  -5,  -2, -11,  -9,   8,  -6,  -1,  -1,  -5,  -8,  -8,  -5,  -7,  -2,   2, -14,  -6, -17,  -6,   5,  -6,  -5], // I
        [ -7, -14,  -4,  -4, -14,  -7,  -6,  -6,   7,  -8,  -2,  -1,  -6,  -3,   0,  -4,  -3,  -9, -12,  -9, -17,  -2,  -7,  -4,  -5], // K
        [ -6, -15, -12,  -9,  -3, -10,  -6,  -1,  -8,   7,   1,  -7,  -7,  -5,  -8,  -8,  -7,  -2,  -6,  -7, -17,  -9,   6,  -7,  -6], // L
        [ -5, -13, -11,  -7,  -4,  -8, -10,  -1,  -2,   1,  11,  -9,  -8,  -4,  -4,  -5,  -4,  -1, -13, -11, -17, -10,   0,  -5,  -5], // M
        [ -4, -11,   2,  -2,  -9,  -3,   0,  -5,  -1,  -7,  -9,   8,  -6,  -3,  -6,   0,  -2,  -8,  -8,  -4, -17,   6,  -6,  -3,  -3], // N
        [ -2,  -8,  -8,  -5, -10,  -6,  -4,  -8,  -6,  -7,  -8,  -6,   8,  -3,  -4,  -2,  -4,  -6, -14, -13, -17,  -7,  -7,  -4,  -5], // P
        [ -4, -14,  -2,   1, -13,  -7,   1,  -8,  -3,  -5,  -4,  -3,  -3,   8,  -2,  -5,  -5,  -7, -13, -12, -17,  -3,  -5,   6,  -5], // Q
        [ -7,  -8, -10,  -9,  -9,  -9,  -2,  -5,   0,  -8,  -4,  -6,  -4,  -2,   8,  -3,  -6,  -8,  -2, -10, -17,  -7,  -7,  -4,  -6], // R
        [  0,  -3,  -4,  -4,  -6,  -2,  -6,  -7,  -4,  -8,  -5,   0,  -2,  -5,  -3,   6,   0,  -6,  -5,  -7, -17,  -1,  -8,  -5,  -3], // S
        [ -1,  -8,  -5,  -6,  -9,  -6,  -7,  -2,  -3,  -7,  -4,  -2,  -4,  -5,  -6,   0,   7,  -3, -13,  -6, -17,  -3,  -5,  -6,  -4], // T
        [ -2,  -6,  -8,  -6,  -8,  -5,  -6,   2,  -9,  -2,  -1,  -8,  -6,  -7,  -8,  -6,  -3,   7, -15,  -7, -17,  -8,   0,  -6,  -5], // V
        [-13, -15, -15, -17,  -4, -15,  -7, -14, -12,  -6, -13,  -8, -14, -13,  -2,  -5, -13, -15,  13,  -5, -17, -10,  -7, -14, -11], // W
        [ -8,  -4, -11,  -8,   2, -14,  -3,  -6,  -9,  -7, -11,  -4, -13, -12, -10,  -7,  -6,  -7,  -5,  10, -17,  -6,  -7,  -9,  -7], // Y
        [-17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17,   1, -17, -17, -17, -17], // *
        [ -3, -12,   6,   1, -10,  -3,  -1,  -6,  -2,  -9, -10,   6,  -7,  -3,  -7,  -1,  -3,  -8, -10,  -6, -17,   6,  -8,   0,  -5], // B
        [ -6,  -9, -10,  -7,  -2, -10,  -7,   5,  -7,   6,   0,  -6,  -7,  -5,  -7,  -8,  -5,   0,  -7,  -7, -17,  -8,   6,  -6,  -6], // J
        [ -3, -14,   1,   6, -13,  -5,  -1,  -6,  -4,  -7,  -5,  -3,  -4,   6,  -4,  -5,  -6,  -6, -14,  -9, -17,   0,  -6,   6,  -5], // Z
        [ -3,  -9,  -5,  -5,  -8,  -5,  -5,  -5,  -5,  -6,  -5,  -3,  -5,  -5,  -6,  -3,  -4,  -5, -11,  -7, -17,  -5,  -6,  -5,  -5], // X
    ]
);

/// The PAM40 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/2 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static PAM_40: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       //  A    C    D    E    F    G    H    I    K    L    M    N    P    Q    R    S    T    V    W    Y    *    B    J    Z    X  
        [  6,  -6,  -3,  -2,  -7,  -1,  -6,  -4,  -6,  -5,  -4,  -3,  -1,  -3,  -6,   0,   0,  -2, -12,  -7, -15,  -3,  -5,  -2,  -3], // A
        [ -6,   9, -12, -12, -11,  -8,  -7,  -5, -12, -13, -12,  -9,  -7, -12,  -7,  -2,  -7,  -5, -14,  -3, -15, -11,  -8, -12,  -8], // C
        [ -3, -12,   7,   3, -13,  -3,  -3,  -6,  -4, -11,  -9,   2,  -7,  -2,  -9,  -3,  -4,  -7, -13, -10, -15,   6,  -9,   2,  -5], // D
        [ -2, -12,   3,   7, -12,  -3,  -4,  -5,  -4,  -8,  -6,  -1,  -5,   2,  -8,  -4,  -5,  -6, -15,  -8, -15,   2,  -7,   6,  -4], // E
        [ -7, -11, -13, -12,   9,  -8,  -5,  -2, -12,  -2,  -3,  -8,  -9, -11,  -8,  -6,  -8,  -7,  -4,   2, -15,  -9,  -2, -12,  -7], // F
        [ -1,  -8,  -3,  -3,  -8,   6,  -8,  -9,  -6,  -9,  -7,  -2,  -5,  -6,  -8,  -1,  -5,  -5, -13, -12, -15,  -2,  -9,  -4,  -4], // G
        [ -6,  -7,  -3,  -4,  -5,  -8,   9,  -8,  -5,  -5,  -9,   1,  -3,   1,  -1,  -5,  -6,  -6,  -6,  -3, -15,  -1,  -6,   0,  -4], // H
        [ -4,  -5,  -6,  -5,  -2,  -9,  -8,   8,  -5,  -1,   0,  -4,  -7,  -7,  -5,  -6,  -2,   2, -12,  -5, -15,  -5,   5,  -5,  -4], // I
        [ -6, -12,  -4,  -4, -12,  -6,  -5,  -5,   6,  -7,  -1,   0,  -6,  -2,   1,  -3,  -2,  -8, -10,  -8, -15,  -2,  -6,  -3,  -4], // K
        [ -5, -13, -11,  -8,  -2,  -9,  -5,  -1,  -7,   7,   1,  -6,  -6,  -4,  -8,  -7,  -6,  -2,  -5,  -6, -15,  -8,   6,  -6,  -5], // L
        [ -4, -12,  -9,  -6,  -3,  -7,  -9,   0,  -1,   1,  11,  -7,  -7,  -3,  -3,  -5,  -3,  -1, -11, -10, -15,  -8,   1,  -4,  -4], // M
        [ -3,  -9,   2,  -1,  -8,  -2,   1,  -4,   0,  -6,  -7,   7,  -5,  -3,  -5,   0,  -1,  -7,  -7,  -4, -15,   6,  -6,  -2,  -3], // N
        [ -1,  -7,  -7,  -5,  -9,  -5,  -3,  -7,  -6,  -6,  -7,  -5,   8,  -2,  -3,  -1,  -3,  -5, -12, -12, -15,  -6,  -6,  -3,  -4], // P
        [ -3, -12,  -2,   2, -11,  -6,   1,  -7,  -2,  -4,  -3,  -3,  -2,   8,  -1,  -4,  -5,  -6, -11, -10, -15,  -2,  -5,   6,  -4], // Q
        [ -6,  -7,  -9,  -8,  -8,  -8,  -1,  -5,   1,  -8,  -3,  -5,  -3,  -1,   8,  -2,  -5,  -7,  -1,  -9, -15,  -6,  -6,  -3,  -5], // R
        [  0,  -2,  -3,  -4,  -6,  -1,  -5,  -6,  -3,  -7,  -5,   0,  -1,  -4,  -2,   6,   1,  -5,  -4,  -6, -15,  -1,  -7,  -4,  -2], // S
        [  0,  -7,  -4,  -5,  -8,  -5,  -6,  -2,  -2,  -6,  -3,  -1,  -3,  -5,  -5,   1,   7,  -2, -11,  -6, -15,  -2,  -4,  -5,  -3], // T
        [ -2,  -5,  -7,  -6,  -7,  -5,  -6,   2,  -8,  -2,  -1,  -7,  -5,  -6,  -7,  -5,  -2,   7, -14,  -6, -15,  -7,   0,  -6,  -4], // V
        [-12, -14, -13, -15,  -4, -13,  -6, -12, -10,  -5, -11,  -7, -12, -11,  -1,  -4, -11, -14,  13,  -4, -15,  -9,  -6, -13,  -9], // W
        [ -7,  -3, -10,  -8,   2, -12,  -3,  -5,  -8,  -6, -10,  -4, -12, -10,  -9,  -6,  -6,  -6,  -4,  10, -15,  -6,  -6,  -8,  -7], // Y
        [-15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15,   1, -15, -15, -15, -15], // *
        [ -3, -11,   6,   2,  -9,  -2,  -1,  -5,  -2,  -8,  -8,   6,  -6,  -2,  -6,  -1,  -2,  -7,  -9,  -6, -15,   6,  -7,   1,  -4], // B
        [ -5,  -8,  -9,  -7,  -2,  -9,  -6,   5,  -6,   6,   1,  -6,  -6,  -5,  -6,  -7,  -4,   0,  -6,  -6, -15,  -7,   5,  -6,  -5], // J
        [ -2, -12,   2,   6, -12,  -4,   0,  -5,  -3,  -6,  -4,  -2,  -3,   6,  -3,  -4,  -5,  -6, -13,  -8, -15,   1,  -6,   6,  -4], // Z
        [ -3,  -8,  -5,  -4,  -7,  -4,  -4,  -4,  -4,  -5,  -4,  -3,  -4,  -4,  -5,  -2,  -3,  -4,  -9,  -7, -15,  -4,  -5,  -4,  -4], // X
    ]
);

/// The PAM70 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/2 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static PAM_70: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       //  A    C    D    E    F    G    H    I    K    L    M    N    P    Q    R    S    T    V    W    Y    *    B    J    Z    X  
        [  5,  -4,  -1,  -1,  -6,   0,  -4,  -2,  -4,  -4,  -3,  -2,   0,  -2,  -4,   1,   1,  -1,  -9,  -5, -11,  -1,  -3,  -1,  -2], // A
        [ -4,   9,  -9,  -9,  -8,  -6,  -5,  -4,  -9, -10,  -9,  -7,  -5,  -9,  -5,  -1,  -5,  -4, -11,  -2, -11,  -8,  -7,  -9,  -6], // C
        [ -1,  -9,   6,   3, -10,  -1,  -1,  -5,  -2,  -8,  -7,   3,  -4,   0,  -6,  -1,  -2,  -5, -10,  -7, -11,   5,  -7,   2,  -3], // D
        [ -1,  -9,   3,   6,  -9,  -2,  -2,  -4,  -2,  -6,  -4,   0,  -3,   2,  -5,  -2,  -3,  -4, -11,  -6, -11,   2,  -5,   5,  -3], // E
        [ -6,  -8, -10,  -9,   8,  -7,  -4,   0,  -9,  -1,  -2,  -6,  -7,  -9,  -7,  -4,  -6,  -5,  -2,   4, -11,  -7,  -1,  -9,  -5], // F
        [  0,  -6,  -1,  -2,  -7,   6,  -6,  -6,  -5,  -7,  -6,  -1,  -3,  -4,  -6,   0,  -3,  -3, -10,  -9, -11,  -1,  -7,  -3,  -3], // G
        [ -4,  -5,  -1,  -2,  -4,  -6,   8,  -6,  -3,  -4,  -6,   1,  -2,   2,   0,  -3,  -4,  -4,  -5,  -1, -11,   0,  -4,   1,  -3], // H
        [ -2,  -4,  -5,  -4,   0,  -6,  -6,   7,  -4,   1,   1,  -3,  -5,  -5,  -3,  -4,  -1,   3,  -9,  -4, -11,  -4,   4,  -4,  -3], // I
        [ -4,  -9,  -2,  -2,  -9,  -5,  -3,  -4,   6,  -5,   0,   0,  -4,  -1,   2,  -2,  -1,  -6,  -7,  -7, -11,  -1,  -5,  -2,  -3], // K
        [ -4, -10,  -8,  -6,  -1,  -7,  -4,   1,  -5,   6,   2,  -5,  -5,  -3,  -6,  -6,  -4,   0,  -4,  -4, -11,  -6,   5,  -4,  -4], // L
        [ -3,  -9,  -7,  -4,  -2,  -6,  -6,   1,   0,   2,  10,  -5,  -5,  -2,  -2,  -3,  -2,   0,  -8,  -7, -11,  -6,   2,  -3,  -3], // M
        [ -2,  -7,   3,   0,  -6,  -1,   1,  -3,   0,  -5,  -5,   6,  -3,  -1,  -3,   1,   0,  -5,  -6,  -3, -11,   5,  -4,  -1,  -2], // N
        [  0,  -5,  -4,  -3,  -7,  -3,  -2,  -5,  -4,  -5,  -5,  -3,   7,  -1,  -2,   0,  -2,  -3,  -9,  -9, -11,  -4,  -5,  -2,  -3], // P
        [ -2,  -9,   0,   2,  -9,  -4,   2,  -5,  -1,  -3,  -2,  -1,  -1,   7,   0,  -3,  -3,  -4,  -8,  -8, -11,  -1,  -3,   5,  -2], // Q
        [ -4,  -5,  -6,  -5,  -7,  -6,   0,  -3,   2,  -6,  -2,  -3,  -2,   0,   8,  -1,  -4,  -5,   0,  -7, -11,  -4,  -5,  -2,  -3], // R
        [  1,  -1,  -1,  -2,  -4,   0,  -3,  -4,  -2,  -6,  -3,   1,   0,  -3,  -1,   5,   2,  -3,  -3,  -5, -11,   0,  -5,  -2,  -1], // S
        [  1,  -5,  -2,  -3,  -6,  -3,  -4,  -1,  -1,  -4,  -2,   0,  -2,  -3,  -4,   2,   6,  -1,  -8,  -4, -11,  -1,  -3,  -3,  -2], // T
        [ -1,  -4,  -5,  -4,  -5,  -3,  -4,   3,  -6,   0,   0,  -5,  -3,  -4,  -5,  -3,  -1,   6, -10,  -5, -11,  -5,   1,  -4,  -2], // V
        [ -9, -11, -10, -11,  -2, -10,  -5,  -9,  -7,  -4,  -8,  -6,  -9,  -8,   0,  -3,  -8, -10,  13,  -3, -11,  -7,  -5, -10,  -7], // W
        [ -5,  -2,  -7,  -6,   4,  -9,  -1,  -4,  -7,  -4,  -7,  -3,  -9,  -8,  -7,  -5,  -4,  -5,  -3,   9, -11,  -4,  -4,  -7,  -5], // Y
        [-11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11,   1, -11, -11, -11, -11], // *
        [ -1,  -8,   5,   2,  -7,  -1,   0,  -4,  -1,  -6,  -6,   5,  -4,  -1,  -4,   0,  -1,  -5,  -7,  -4, -11,   5,  -5,   1,  -2], // B
        [ -3,  -7,  -7,  -5,  -1,  -7,  -4,   4,  -5,   5,   2,  -4,  -5,  -3,  -5,  -5,  -3,   1,  -5,  -4, -11,  -5,   5,  -4,  -3], // J
        [ -1,  -9,   2,   5,  -9,  -3,   1,  -4,  -2,  -4,  -3,  -1,  -2,   5,  -2,  -2,  -3,  -4, -10,  -7, -11,   1,  -4,   5,  -3], // Z
        [ -2,  -6,  -3,  -3,  -5,  -3,  -3,  -3,  -3,  -4,  -3,  -2,  -3,  -2,  -3,  -1,  -2,  -2,  -7,  -5, -11,  -2,  -3,  -3,  -3], // X
    ]
);

/// The PAM120 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/2 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static PAM_120: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       // A   C   D   E   F   G   H   I   K   L   M   N   P   Q   R   S   T   V   W   Y   *   B   J   Z   X  
        [ 3, -3,  0,  0, -4,  1, -3, -1, -2, -3, -2, -1,  1, -1, -3,  1,  1,  0, -7, -4, -8,  0, -2, -1, -1], // A
        [-3,  9, -7, -7, -6, -4, -4, -3, -7, -7, -6, -5, -4, -7, -4,  0, -3, -3, -8, -1, -8, -6, -5, -7, -4], // C
        [ 0, -7,  5,  3, -7,  0,  0, -3, -1, -5, -4,  2, -3,  1, -3,  0, -1, -3, -8, -5, -8,  4, -5,  3, -2], // D
        [ 0, -7,  3,  5, -7, -1, -1, -3, -1, -4, -3,  1, -2,  2, -3, -1, -2, -3, -8, -5, -8,  3, -4,  4, -1], // E
        [-4, -6, -7, -7,  8, -5, -3,  0, -7,  0, -1, -4, -5, -6, -5, -3, -4, -3, -1,  4, -8, -5,  0, -6, -3], // F
        [ 1, -4,  0, -1, -5,  5, -4, -4, -3, -5, -4,  0, -2, -3, -4,  1, -1, -2, -8, -6, -8,  0, -5, -2, -2], // G
        [-3, -4,  0, -1, -3, -4,  7, -4, -2, -3, -4,  2, -1,  3,  1, -2, -3, -3, -3, -1, -8,  1, -3,  1, -2], // H
        [-1, -3, -3, -3,  0, -4, -4,  6, -3,  1,  1, -2, -3, -3, -2, -2,  0,  3, -6, -2, -8, -3,  3, -3, -1], // I
        [-2, -7, -1, -1, -7, -3, -2, -3,  5, -4,  0,  1, -2,  0,  2, -1, -1, -4, -5, -5, -8,  0, -3, -1, -2], // K
        [-3, -7, -5, -4,  0, -5, -3,  1, -4,  5,  3, -4, -3, -2, -4, -4, -3,  1, -3, -2, -8, -4,  5, -3, -2], // L
        [-2, -6, -4, -3, -1, -4, -4,  1,  0,  3,  8, -3, -3, -1, -1, -2, -1,  1, -6, -4, -8, -4,  2, -2, -2], // M
        [-1, -5,  2,  1, -4,  0,  2, -2,  1, -4, -3,  4, -2,  0, -1,  1,  0, -3, -4, -2, -8,  3, -3,  0, -1], // N
        [ 1, -4, -3, -2, -5, -2, -1, -3, -2, -3, -3, -2,  6,  0, -1,  1, -1, -2, -7, -6, -8, -2, -3, -1, -2], // P
        [-1, -7,  1,  2, -6, -3,  3, -3,  0, -2, -1,  0,  0,  6,  1, -2, -2, -3, -6, -5, -8,  0, -2,  4, -1], // Q
        [-3, -4, -3, -3, -5, -4,  1, -2,  2, -4, -1, -1, -1,  1,  6, -1, -2, -3,  1, -5, -8, -2, -3, -1, -2], // R
        [ 1,  0,  0, -1, -3,  1, -2, -2, -1, -4, -2,  1,  1, -2, -1,  3,  2, -2, -2, -3, -8,  0, -3, -1, -1], // S
        [ 1, -3, -1, -2, -4, -1, -3,  0, -1, -3, -1,  0, -1, -2, -2,  2,  4,  0, -6, -3, -8,  0, -2, -2, -1], // T
        [ 0, -3, -3, -3, -3, -2, -3,  3, -4,  1,  1, -3, -2, -3, -3, -2,  0,  5, -8, -3, -8, -3,  2, -3, -1], // V
        [-7, -8, -8, -8, -1, -8, -3, -6, -5, -3, -6, -4, -7, -6,  1, -2, -6, -8, 12, -2, -8, -6, -3, -7, -5], // W
        [-4, -1, -5, -5,  4, -6, -1, -2, -5, -2, -4, -2, -6, -5, -5, -3, -3, -3, -2,  8, -8, -3, -2, -5, -3], // Y
        [-8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8,  1, -8, -8, -8, -8], // *
        [ 0, -6,  4,  3, -5,  0,  1, -3,  0, -4, -4,  3, -2,  0, -2,  0,  0, -3, -6, -3, -8,  4, -4,  2, -1], // B
        [-2, -5, -5, -4,  0, -5, -3,  3, -3,  5,  2, -3, -3, -2, -3, -3, -2,  2, -3, -2, -8, -4,  4, -3, -2], // J
        [-1, -7,  3,  4, -6, -2,  1, -3, -1, -3, -2,  0, -1,  4, -1, -1, -2, -3, -7, -5, -8,  2, -3,  4, -1], // Z
        [-1, -4, -2, -1, -3, -2, -2, -1, -2, -2, -2, -1, -2, -1, -2, -1, -1, -1, -5, -3, -8, -1, -2, -1, -2], // X
    ]
);

/// The PAM200 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/3 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static PAM_200: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       // A   C   D   E   F   G   H   I   K   L   M   N   P   Q   R   S   T   V   W   Y   *   B   J   Z   X  
        [ 3, -3,  0,  0, -4,  1, -2, -1, -2, -2, -2,  0,  1, -1, -2,  1,  1,  0, -7, -4, -9,  0, -2,  0,  0], // A
        [-3, 12, -6, -7, -6, -4, -4, -3, -7, -7, -6, -5, -4, -7, -4,  0, -3, -2, -9,  0, -9, -5, -5, -7, -4], // C
        [ 0, -6,  5,  4, -7,  0,  0, -3,  0, -5, -4,  3, -2,  2, -2,  0,  0, -3, -8, -5, -9,  4, -4,  3, -1], // D
        [ 0, -7,  4,  5, -7,  0,  0, -3,  0, -4, -3,  2, -1,  3, -2,  0, -1, -2, -9, -5, -9,  3, -4,  4, -1], // E
        [-4, -6, -7, -7, 10, -6, -2,  1, -7,  2,  0, -4, -6, -6, -5, -4, -4, -2,  0,  7, -9, -6,  1, -6, -3], // F
        [ 1, -4,  0,  0, -6,  6, -3, -3, -2, -5, -4,  0, -1, -2, -4,  1,  0, -2, -8, -6, -9,  0, -5, -1, -1], // G
        [-2, -4,  0,  0, -2, -3,  8, -3, -1, -3, -3,  2, -1,  3,  2, -1, -2, -3, -3,  0, -9,  1, -3,  2, -1], // H
        [-1, -3, -3, -3,  1, -3, -3,  6, -2,  2,  2, -2, -3, -3, -2, -2,  0,  4, -6, -2, -9, -3,  4, -3, -1], // I
        [-2, -7,  0,  0, -7, -2, -1, -2,  6, -4,  1,  1, -2,  1,  4,  0,  0, -3, -4, -5, -9,  0, -3,  0, -1], // K
        [-2, -7, -5, -4,  2, -5, -3,  2, -4,  7,  4, -4, -3, -2, -4, -4, -2,  2, -2, -2, -9, -4,  6, -3, -2], // L
        [-2, -6, -4, -3,  0, -4, -3,  2,  1,  4,  8, -2, -3, -1, -1, -2, -1,  2, -5, -3, -9, -3,  4, -2, -1], // M
        [ 0, -5,  3,  2, -4,  0,  2, -2,  1, -4, -2,  3, -1,  1,  0,  1,  0, -2, -5, -2, -9,  3, -3,  1,  0], // N
        [ 1, -4, -2, -1, -6, -1, -1, -3, -2, -3, -3, -1,  7,  0,  0,  1,  0, -2, -7, -6, -9, -1, -3, -1, -1], // P
        [-1, -7,  2,  3, -6, -2,  3, -3,  1, -2, -1,  1,  0,  5,  1, -1, -1, -3, -6, -5, -9,  1, -2,  4, -1], // Q
        [-2, -4, -2, -2, -5, -4,  2, -2,  4, -4, -1,  0,  0,  1,  7, -1, -1, -3,  2, -5, -9, -1, -3,  0, -1], // R
        [ 1,  0,  0,  0, -4,  1, -1, -2,  0, -4, -2,  1,  1, -1, -1,  2,  2, -1, -3, -3, -9,  1, -3, -1,  0], // S
        [ 1, -3,  0, -1, -4,  0, -2,  0,  0, -2, -1,  0,  0, -1, -1,  2,  4,  0, -6, -3, -9,  0, -1, -1,  0], // T
        [ 0, -2, -3, -2, -2, -2, -3,  4, -3,  2,  2, -2, -2, -3, -3, -1,  0,  5, -8, -3, -9, -3,  3, -2, -1], // V
        [-7, -9, -8, -9,  0, -8, -3, -6, -4, -2, -5, -5, -7, -6,  2, -3, -6, -8, 18, -1, -9, -6, -3, -7, -5], // W
        [-4,  0, -5, -5,  7, -6,  0, -2, -5, -2, -3, -2, -6, -5, -5, -3, -3, -3, -1, 11, -9, -4, -2, -5, -3], // Y
        [-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,  1, -9, -9, -9, -9], // *
        [ 0, -5,  4,  3, -6,  0,  1, -3,  0, -4, -3,  3, -1,  1, -1,  1,  0, -3, -6, -4, -9,  3, -4,  2, -1], // B
        [-2, -5, -4, -4,  1, -5, -3,  4, -3,  6,  4, -3, -3, -2, -3, -3, -1,  3, -3, -2, -9, -4,  5, -3, -2], // J
        [ 0, -7,  3,  4, -6, -1,  2, -3,  0, -3, -2,  1, -1,  4,  0, -1, -1, -2, -7, -5, -9,  2, -3,  4, -1], // Z
        [ 0, -4, -1, -1, -3, -1, -1, -1, -1, -2, -1,  0, -1, -1, -1,  0,  0, -1, -5, -3, -9, -1, -2, -1, -1], // X
    ]
);

/// The PAM250 protein substitution matrix.
///
/// This supports scores for the twenty standard amino acids, ambiguous amino
/// acids `BJZX`, and stop codons `*`. It uses a scale of 1/3 bit units. See the
/// [matrices module](crate::data::matrices) for more details.
#[rustfmt::skip]
pub static PAM_250: WeightMatrix<i8, 25> = WeightMatrix::new_custom(
    &AA_ALL_AMBIG_PROFILE_MAP_WITH_STOP,
    [
       // A   C   D   E   F   G   H   I   K   L   M   N   P   Q   R   S   T   V   W   Y   *   B   J   Z   X  
        [ 2, -2,  0,  0, -3,  1, -1, -1, -1, -2, -1,  0,  1,  0, -2,  1,  1,  0, -6, -3, -8,  0, -1,  0,  0], // A
        [-2, 12, -5, -5, -4, -3, -3, -2, -5, -6, -5, -4, -3, -5, -4,  0, -2, -2, -8,  0, -8, -4, -5, -5, -3], // C
        [ 0, -5,  4,  3, -6,  1,  1, -2,  0, -4, -3,  2, -1,  2, -1,  0,  0, -2, -7, -4, -8,  3, -3,  3, -1], // D
        [ 0, -5,  3,  4, -5,  0,  1, -2,  0, -3, -2,  1, -1,  2, -1,  0,  0, -2, -7, -4, -8,  3, -3,  3, -1], // E
        [-3, -4, -6, -5,  9, -5, -2,  1, -5,  2,  0, -3, -5, -5, -4, -3, -3, -1,  0,  7, -8, -4,  2, -5, -2], // F
        [ 1, -3,  1,  0, -5,  5, -2, -3, -2, -4, -3,  0,  0, -1, -3,  1,  0, -1, -7, -5, -8,  0, -4,  0, -1], // G
        [-1, -3,  1,  1, -2, -2,  6, -2,  0, -2, -2,  2,  0,  3,  2, -1, -1, -2, -3,  0, -8,  1, -2,  2, -1], // H
        [-1, -2, -2, -2,  1, -3, -2,  5, -2,  2,  2, -2, -2, -2, -2, -1,  0,  4, -5, -1, -8, -2,  3, -2, -1], // I
        [-1, -5,  0,  0, -5, -2,  0, -2,  5, -3,  0,  1, -1,  1,  3,  0,  0, -2, -3, -4, -8,  1, -3,  0, -1], // K
        [-2, -6, -4, -3,  2, -4, -2,  2, -3,  6,  4, -3, -3, -2, -3, -3, -2,  2, -2, -1, -8, -3,  5, -3, -1], // L
        [-1, -5, -3, -2,  0, -3, -2,  2,  0,  4,  6, -2, -2, -1,  0, -2, -1,  2, -4, -2, -8, -2,  3, -2, -1], // M
        [ 0, -4,  2,  1, -3,  0,  2, -2,  1, -3, -2,  2,  0,  1,  0,  1,  0, -2, -4, -2, -8,  2, -3,  1,  0], // N
        [ 1, -3, -1, -1, -5,  0,  0, -2, -1, -3, -2,  0,  6,  0,  0,  1,  0, -1, -6, -5, -8, -1, -2,  0, -1], // P
        [ 0, -5,  2,  2, -5, -1,  3, -2,  1, -2, -1,  1,  0,  4,  1, -1, -1, -2, -5, -4, -8,  1, -2,  3, -1], // Q
        [-2, -4, -1, -1, -4, -3,  2, -2,  3, -3,  0,  0,  0,  1,  6,  0, -1, -2,  2, -4, -8, -1, -3,  0, -1], // R
        [ 1,  0,  0,  0, -3,  1, -1, -1,  0, -3, -2,  1,  1, -1,  0,  2,  1, -1, -2, -3, -8,  0, -2,  0,  0], // S
        [ 1, -2,  0,  0, -3,  0, -1,  0,  0, -2, -1,  0,  0, -1, -1,  1,  3,  0, -5, -3, -8,  0, -1, -1,  0], // T
        [ 0, -2, -2, -2, -1, -1, -2,  4, -2,  2,  2, -2, -1, -2, -2, -1,  0,  4, -6, -2, -8, -2,  2, -2, -1], // V
        [-6, -8, -7, -7,  0, -7, -3, -5, -3, -2, -4, -4, -6, -5,  2, -2, -5, -6, 17,  0, -8, -5, -3, -6, -4], // W
        [-3,  0, -4, -4,  7, -5,  0, -1, -4, -1, -2, -2, -5, -4, -4, -3, -3, -2,  0, 10, -8, -3, -1, -4, -2], // Y
        [-8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8,  1, -8, -8, -8, -8], // *
        [ 0, -4,  3,  3, -4,  0,  1, -2,  1, -3, -2,  2, -1,  1, -1,  0,  0, -2, -5, -3, -8,  3, -3,  2, -1], // B
        [-1, -5, -3, -3,  2, -4, -2,  3, -3,  5,  3, -3, -2, -2, -3, -2, -1,  2, -3, -1, -8, -3,  5, -2, -1], // J
        [ 0, -5,  3,  3, -5,  0,  2, -2,  0, -3, -2,  1,  0,  3,  0,  0, -1, -2, -6, -4, -8,  2, -2,  3, -1], // Z
        [ 0, -3, -1, -1, -2, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1,  0,  0, -1, -4, -2, -8, -1, -1, -1, -1], // X
    ]
);
